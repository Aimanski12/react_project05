{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp, checkRoute } from './commonfunctions';\nimport axios from 'axios'; // function to check page session. return boolean\n\nexport function checkforsession() {\n  return _checkforsession.apply(this, arguments);\n} // functionto update the session\n\nfunction _checkforsession() {\n  _checkforsession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var session, route, hasSession, isExp, _id;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            session = sessionStore();\n            route = checkRoute(window.location.pathname);\n\n            if (!session) {\n              _context.next = 7;\n              break;\n            }\n\n            isExp = checkIfExp(session.timeStamp);\n\n            if (isExp) {\n              hasSession = false;\n              updateSession(session._id, route, true);\n            } else {\n              hasSession = true;\n              updateSession(session._id, route, false);\n            }\n\n            _context.next = 12;\n            break;\n\n          case 7:\n            hasSession = false;\n            _context.next = 10;\n            return saveDataToFirebase(route);\n\n          case 10:\n            _id = _context.sent;\n            setSession(_id);\n\n          case 12:\n            return _context.abrupt(\"return\", hasSession);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkforsession.apply(this, arguments);\n}\n\nfunction updateSession(_x, _x2, _x3) {\n  return _updateSession.apply(this, arguments);\n} // function to collect the visited routes from firebase\n\n\nfunction _updateSession() {\n  _updateSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, route, exp) {\n    var url, routeUrl, routes;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = generateUrl('visitor');\n            routeUrl = \"\".concat(url, \"/\").concat(id, \"/routesVisited/routesSeen.json\");\n            _context2.next = 4;\n            return getRoutesVisited(routeUrl);\n\n          case 4:\n            routes = _context2.sent;\n            routes.push(route);\n            axios.put(\"\".concat(url, \"/\").concat(id, \"/routesVisited/routesSeen.json\"), routes).then(function (res) {\n              if (res.data) {\n                if (exp) setSession(id);\n              }\n            })[\"catch\"](function (err) {\n              if (err) {\n                new Promise.reject(err);\n                if (exp) setSession(id);\n              }\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _updateSession.apply(this, arguments);\n}\n\nfunction getRoutesVisited(_x4) {\n  return _getRoutesVisited.apply(this, arguments);\n}\n\nfunction _getRoutesVisited() {\n  _getRoutesVisited = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(routeUrl) {\n    var routes;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            routes = [];\n            _context3.next = 3;\n            return axios.get(routeUrl).then(function (res) {\n              if (res.data) {\n                routes = res.data;\n              }\n            })[\"catch\"](function (err) {\n              if (err) {\n                routes = ['there was an error'];\n              }\n            });\n\n          case 3:\n            _context3.next = 5;\n            return routes;\n\n          case 5:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getRoutesVisited.apply(this, arguments);\n}\n\nfunction saveDataToFirebase(_x5) {\n  return _saveDataToFirebase.apply(this, arguments);\n}\n\nfunction _saveDataToFirebase() {\n  _saveDataToFirebase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(route) {\n    var _id, userIp, user, time, routesVisited, url;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _id = false;\n            _context4.next = 3;\n            return getIP();\n\n          case 3:\n            userIp = _context4.sent;\n            user = getUserData();\n            time = getTime('timeOfVisit');\n            routesVisited = {\n              initial: route,\n              routesSeen: [route]\n            }; // generate visited url\n\n            url = generateUrl('visitor');\n            _context4.next = 10;\n            return axios.post(\"\".concat(url, \".json\"), {\n              userIp: userIp,\n              user: user,\n              time: time,\n              routesVisited: routesVisited\n            }).then(function (res) {\n              if (res.data) _id = res.data.name;\n            })[\"catch\"](function (err) {\n              if (err) new Promise.reject(err);\n            });\n\n          case 10:\n            _context4.next = 12;\n            return _id;\n\n          case 12:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _saveDataToFirebase.apply(this, arguments);\n}\n\nexport function setSession(id) {\n  var data = {\n    _isVisited: true,\n    _id: id,\n    timeStamp: getTime('now')\n  };\n  sessionStorage.setItem('websession', JSON.stringify(data));\n}","map":null,"metadata":{},"sourceType":"module"}