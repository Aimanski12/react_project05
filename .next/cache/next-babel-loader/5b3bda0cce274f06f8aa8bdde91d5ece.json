{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react'; // import {connect} from 'react-redux'\n// import * as action from '../../../store/actions/index'\n// import {mouseOut, mouseEnter} from '../../../utils/common/menuHoverEvents'\n// import {openMenu, closeMenu} from '../../../utils/common/menuClickEvents'\n// import {navHoverElements} from '../../../utils/common/elementSorter'\n// import anime from 'animejs'\n\nimport Close from '../../../components/Svgs/Close/Close'; // import './NavbarMenu.css'\n\nimport { PageData } from '../../../utils/context/pageContext';\n\nclass NavbarMenu extends Component {\n  render() {\n    let data = this.context.headers; // console.log(data)\n    // click event \n\n    const clicked = async () => {\n      if (!this.props.isAnimating) {\n        setAnimate(true);\n\n        if (!this.props.isOpen) {\n          openMenuBtn();\n        } else {\n          closeMenuBtn();\n        }\n      }\n    }; // close menu function\n\n\n    const closeMenuBtn = () => {\n      const el = navHoverElements(); // call function to close animation\n\n      closeMenu(true); // set is animating after 1700 milsec to block multiple click events\n\n      setAnimate(false);\n      const n = document.querySelector('.navbar-container');\n      let tl = anime.timeline({\n        easing: 'easeInQuad',\n        duration: 200\n      });\n      tl.add({\n        targets: n,\n        opacity: 0\n      }).add({\n        duration: 10,\n        complete: function (anim) {\n          this.props.setMenu(!this.props.isOpen);\n        }\n      }).add({\n        targets: n,\n        opacity: 1,\n        complete: function (anim) {\n          el.middle.style.color = this.props.colorModes.close.main;\n        }\n      });\n    }; // open menu function\n\n\n    const openMenuBtn = () => {\n      // call function to open menu animtion\n      openMenu(); // set is animating after 1700 milsec to block multiple click events\n\n      setAnimate(false);\n      const n = document.querySelector('.navbar-container');\n      let tl = anime.timeline({\n        easing: 'easeInQuad',\n        duration: 200\n      });\n      tl.add({\n        targets: n,\n        opacity: 0\n      }).add({\n        duration: 10,\n        complete: function (anim) {\n          this.props.setMenu(!this.props.isOpen);\n        }\n      }).add({\n        targets: n,\n        opacity: 1\n      });\n    }; // function to set isanimating state\n\n\n    const setAnimate = isAnim => {\n      isAnim ? this.props.setAnimating(isAnim) : setTimeout(() => {\n        this.props.setAnimating(false);\n      }, 1700);\n    }; // hover in functions and to set specific assigned colors\n\n\n    const hoverIn = () => {\n      this.props.isOpen ? mouseEnter(this.props.colorModes.open, 'open') : mouseEnter(this.props.colorModes.close, 'close');\n    }; // hover out functions and to set specific assigned colors\n\n\n    const hoverOut = () => {\n      this.props.isOpen ? mouseOut(this.props.colorModes.open, 'open') : mouseOut(this.props.colorModes.close, 'close');\n    }; // console.log(this.props.isAnimating)\n\n\n    return __jsx(\"div\", {\n      className: \"navbar-menu\"\n    }, __jsx(\"div\", {\n      className: \"front content-center\"\n    }, __jsx(\"span\", {\n      className: \"content-center front-text\",\n      style: {\n        'color': data.colormodes.close.foreground\n      },\n      onMouseOver: hoverIn,\n      onMouseLeave: hoverOut,\n      onClick: clicked\n    }, this.props.isOpen ? __jsx(Close, null) : 'Menu')), __jsx(\"div\", {\n      className: \"middle content-center\"\n    }, __jsx(\"span\", {\n      className: \"middle-span\"\n    })), __jsx(\"div\", {\n      className: \"back content-center\"\n    }, __jsx(\"span\", {\n      className: \"back-span\"\n    })));\n  }\n\n} // const mapStateToProps = (state) => {\n//   return {\n//     colorModes: state.state.colorModes,\n//     isOpen: state.state.isOpen,\n//     isAnimating: state.state.isAnimating,\n//     activeRoute: state.state.activeRoute\n//   }\n// }\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     setAnimating: (val) => { dispatch(action.setAnimating(val)) },\n//     setMenu: (val) => { dispatch(action.menuIsOpen(val)) }\n//   }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(NavbarMenu)\n\n\n_defineProperty(NavbarMenu, \"contextType\", PageData);\n\nexport default NavbarMenu;","map":null,"metadata":{},"sourceType":"module"}