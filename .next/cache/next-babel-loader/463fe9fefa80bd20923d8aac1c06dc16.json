{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { UAParser } from 'ua-parser-js';\nimport axios from 'axios'; // get sessionStorage\n// export const sessionStore = JSON.parse(sessionStore.getItem('websession'))\n\nexport function sessionStore() {\n  var session = window.sessionStorage.websession;\n\n  if (session === undefined) {\n    return false;\n  } else {\n    return JSON.parse(session);\n  }\n} // firebase url\n\nvar firebaseUrl = 'https://aimanadlawansite.firebaseio.com'; // function to generate firebase url\n\nexport function generateUrl(urlDirection) {\n  var d = getTime('url');\n  var url = \"\".concat(firebaseUrl, \"/\").concat(urlDirection, \"/\").concat(d.y, \"/\").concat(d.m, \"/\").concat(d.dy, \"_\").concat(d.de);\n  return url;\n} // function to get user data\n\nexport var getUserData = function getUserData() {\n  var parser = new UAParser();\n  return parser.getResult();\n}; // get user device data\n\nexport var getIP = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var userIp;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get('https://ipapi.co/json/').then(function (res) {\n              if (res.status === 200) {\n                if (res.data) {\n                  var data = res.data;\n                  userIp = {\n                    cap: data.country_capital,\n                    city: data.city,\n                    country: data.country_name,\n                    ip: data.ip,\n                    lat: data.latitude,\n                    \"long\": data.longitude,\n                    timeZ: data.timezone,\n                    region: data.region,\n                    postC: data.postal,\n                    internet: data.org\n                  };\n                }\n              }\n            })[\"catch\"](function (err) {\n              if (err) {\n                userIp = {\n                  blocked: 'User blocked this data.'\n                };\n              }\n            });\n\n          case 2:\n            _context.next = 4;\n            return userIp;\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getIP() {\n    return _ref.apply(this, arguments);\n  };\n}(); // check if the session has expired\n\nexport function checkIfExp(time) {\n  var now = getTime('now');\n  var runTime = Math.floor((now - time) / 1000 / 60);\n\n  if (runTime >= 60) {\n    return true;\n  } else {\n    return false;\n  }\n} // function to get time\n\nexport var getTime = function getTime(url) {\n  var date = new Date();\n  var d = date.getDate();\n  var month = date.getMonth(); // get time for url structure query\n\n  if (url === 'url') {\n    return {\n      y: date.getFullYear(),\n      m: \"\".concat(n(month + 1), \"_\").concat(mn[date.getMonth()]),\n      dy: n(d),\n      de: dt[date.getDay()]\n    };\n  } else if (url === 'timeOfVisit') {\n    // get time for the time of visit\n    return {\n      time: \"\".concat(date.getHours(), \": \").concat(date.getMinutes(), \": \").concat(date.getSeconds())\n    };\n  } else if (url === 'now') {\n    // get time for the time of visit\n    return date.getTime();\n  }\n}; // filter number if data is single digit\n\nvar n = function n(d) {\n  return d < 10 ? \"0\".concat(d) : d;\n}; // set the month to the exact number index of the array\n\n\nvar mn = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // set the day to the exact number index of the array\n\nvar dt = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar routes = ['home', 'about', 'projects', 'contacts', 'privacy', 'credentials', 'projects/projects/music-app', 'projects/reservation-app', 'projects/electric-bill', 'projects/music-player3', 'projects/music-player4', 'projects/music-player5']; // this function will generate a return the current route\n// for the state\n\nexport var checkRoute = function checkRoute(route) {\n  var r = route.slice(1, 50);\n  var url = r === '' ? 'home' : r;\n  var b;\n  var a = routes.filter(function (route) {\n    return route === url;\n  });\n\n  if (a[0] === undefined) {\n    b = 'notFound';\n  } else {\n    b = a[0];\n  }\n\n  return b;\n};","map":null,"metadata":{},"sourceType":"module"}