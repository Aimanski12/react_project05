{"ast":null,"code":"import { getUserData, getIP, generateUrl, getTime, checkIfExp, checkRoute } from './commonfunctions';\nimport axios from 'axios'; // function to check page session. return boolean\n\nexport async function checkforsession() {\n  const s = window.sessionStorage.websession;\n  console.log(s); // const session = JSON.parse(window.sessionStorage.websession)\n  // let route = checkRoute(window.location.pathname)\n  // let hasSession;\n  // if(session) {\n  //   let isExp = checkIfExp(session.timeStamp)\n  //   if(isExp){\n  //     hasSession = false\n  //     updateSession(session._id, route, true)\n  //   } else {\n  //     hasSession = true\n  //     updateSession(session._id, route, false)\n  //   }\n  // } else {\n  //   hasSession = false\n  //   let _id = await saveDataToFirebase(route)\n  //   setSession(_id)\n  // }\n  // return hasSession\n} // functionto update the session\n\nasync function updateSession(id, route, exp) {\n  let url = generateUrl('visitor');\n  let routeUrl = `${url}/${id}/routesVisited/routesSeen.json`;\n  let routes = await getRoutesVisited(routeUrl);\n  routes.push(route);\n  axios.put(`${url}/${id}/routesVisited/routesSeen.json`, routes).then(res => {\n    if (res.data) {\n      if (exp) setSession(id);\n    }\n  }).catch(err => {\n    if (err) {\n      new Promise.reject(err);\n      if (exp) setSession(id);\n    }\n  });\n} // function to collect the visited routes from firebase\n\n\nasync function getRoutesVisited(routeUrl) {\n  let routes = [];\n  await axios.get(routeUrl).then(res => {\n    if (res.data) {\n      routes = res.data;\n    }\n  }).catch(err => {\n    if (err) {\n      routes = ['there was an error'];\n    }\n  });\n  return await routes;\n}\n\nasync function saveDataToFirebase(route) {\n  let _id = false;\n  let userIp = await getIP();\n  let user = getUserData();\n  let time = getTime('timeOfVisit');\n  let routesVisited = {\n    initial: route,\n    routesSeen: [route]\n  }; // generate visited url\n\n  let url = generateUrl('visitor');\n  await axios.post(`${url}.json`, {\n    userIp,\n    user,\n    time,\n    routesVisited\n  }).then(res => {\n    if (res.data) _id = res.data.name;\n  }).catch(err => {\n    if (err) new Promise.reject(err);\n  });\n  return await _id;\n}\n\nexport function setSession(id) {\n  let data = {\n    _isVisited: true,\n    _id: id,\n    timeStamp: getTime('now')\n  };\n  sessionStorage.setItem('websession', JSON.stringify(data));\n}","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/sessiondata/sessionStorage.js"],"names":["getUserData","getIP","generateUrl","getTime","checkIfExp","checkRoute","axios","checkforsession","s","window","sessionStorage","websession","console","log","updateSession","id","route","exp","url","routeUrl","routes","getRoutesVisited","push","put","then","res","data","setSession","catch","err","Promise","reject","get","saveDataToFirebase","_id","userIp","user","time","routesVisited","initial","routesSeen","post","name","_isVisited","timeStamp","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import { getUserData, getIP, generateUrl, getTime, checkIfExp, checkRoute} from './commonfunctions'\r\nimport axios from 'axios'\r\n\r\n\r\n// function to check page session. return boolean\r\nexport async function checkforsession () {\r\n  const s = window.sessionStorage.websession\r\n  console.log(s)\r\n\r\n\r\n\r\n  // const session = JSON.parse(window.sessionStorage.websession)\r\n\r\n  // let route = checkRoute(window.location.pathname)\r\n  // let hasSession;\r\n  \r\n  // if(session) {\r\n  //   let isExp = checkIfExp(session.timeStamp)\r\n  //   if(isExp){\r\n  //     hasSession = false\r\n  //     updateSession(session._id, route, true)\r\n  //   } else {\r\n  //     hasSession = true\r\n  //     updateSession(session._id, route, false)\r\n  //   }\r\n  // } else {\r\n  //   hasSession = false\r\n  //   let _id = await saveDataToFirebase(route)\r\n  //   setSession(_id)\r\n  // }\r\n\r\n  // return hasSession\r\n}\r\n\r\n// functionto update the session\r\nasync function updateSession(id, route, exp) {\r\n  let url = generateUrl('visitor')\r\n  let routeUrl = `${url}/${id}/routesVisited/routesSeen.json`\r\n\r\n  let routes = await getRoutesVisited(routeUrl)\r\n  routes.push(route)\r\n\r\n  axios.put(`${url}/${id}/routesVisited/routesSeen.json`, routes)\r\n    .then(res => {\r\n      if (res.data) {\r\n        if (exp) setSession(id)\r\n      }\r\n    })\r\n    .catch(err => {\r\n      if (err) {\r\n        new Promise.reject(err)\r\n        if (exp) setSession(id)\r\n      }\r\n    })\r\n}\r\n\r\n// function to collect the visited routes from firebase\r\nasync function getRoutesVisited(routeUrl) {\r\n  let routes = []\r\n  await axios.get(routeUrl)\r\n    .then(res => {\r\n      if (res.data) {\r\n        routes = res.data\r\n      }\r\n    })\r\n    .catch(err => {\r\n      if (err) {\r\n        routes = ['there was an error']\r\n      }\r\n    })\r\n  return await routes\r\n}\r\n\r\n\r\nasync function saveDataToFirebase(route) {\r\n  let _id = false\r\n  let userIp = await getIP()\r\n  let user = getUserData()\r\n  let time = getTime('timeOfVisit')\r\n  let routesVisited = {\r\n    initial: route,\r\n    routesSeen: [route]\r\n  }\r\n\r\n  // generate visited url\r\n  let url = generateUrl('visitor')\r\n\r\n  await axios.post(`${url}.json`, {\r\n      userIp,\r\n      user,\r\n      time,\r\n      routesVisited\r\n    })\r\n    .then(res => {\r\n      if (res.data)\r\n        _id = res.data.name\r\n    })\r\n    .catch(err => {\r\n      if (err) new Promise.reject(err)\r\n    })\r\n  return await _id\r\n}\r\n\r\nexport function setSession(id) {\r\n  let data = {\r\n    _isVisited: true,\r\n    _id: id,\r\n    timeStamp: getTime('now'),\r\n  }\r\n  sessionStorage.setItem('websession', JSON.stringify(data))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}