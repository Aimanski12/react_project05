{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\utils\\\\context\\\\inputContext.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, createContext } from 'react';\nimport { checkValue, stateUpdateValue } from '../common/inputValidation';\nimport { saveMessageToFirebase } from '../sessiondata/saveMessage'; // export InputContext \n\nexport var InputData = createContext(); // the props is received and has a value that references\n// the input data sets and returns data for the message form\n\nexport function InputDataContext(props) {\n  _s();\n\n  var _useState = useState({\n    inputValue: ['', '', '', ''],\n    alert: {\n      message: '* required',\n      color: 'go'\n    },\n    activeInput: null\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // this function updates the state\n\n\n  function setInputState(newState) {\n    setState(_objectSpread(_objectSpread({}, state), newState));\n  } // this function updates each values \n  // in the array of input values\n\n\n  function setvalues(val, i, input) {\n    var values = state.inputValue;\n    values[i] = val;\n    setInputState({\n      inputValue: values,\n      activeInput: input\n    });\n  } // handle the submit event by validating if every\n  // values in the input are valid. if not we will return \n  // a object that we be updated on the state. \n\n\n  function submitHandler() {\n    return _submitHandler.apply(this, arguments);\n  }\n\n  function _submitHandler() {\n    _submitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var values, name, email, message, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              values = state.inputValue;\n              name = checkValue('name', values[0]);\n              email = checkValue('email', values[1]);\n              message = checkValue('message', values[3]);\n\n              if (!(name === 'nameIsEmpty')) {\n                _context.next = 8;\n                break;\n              }\n\n              setInputState(stateUpdateValue(name));\n              _context.next = 30;\n              break;\n\n            case 8:\n              if (!(name === 'hasNumber')) {\n                _context.next = 13;\n                break;\n              }\n\n              setInputState(stateUpdateValue(name));\n              return _context.abrupt(\"return\");\n\n            case 13:\n              if (!(email === 'emailIsEmpty')) {\n                _context.next = 17;\n                break;\n              }\n\n              setInputState(stateUpdateValue(email));\n              _context.next = 30;\n              break;\n\n            case 17:\n              if (!(email === 'emailIsInvalid')) {\n                _context.next = 21;\n                break;\n              }\n\n              setInputState(stateUpdateValue(email));\n              _context.next = 30;\n              break;\n\n            case 21:\n              if (!(message === 'messageIsEmpty')) {\n                _context.next = 25;\n                break;\n              }\n\n              setInputState(stateUpdateValue(message));\n              _context.next = 30;\n              break;\n\n            case 25:\n              setInputState(stateUpdateValue('process'));\n              _context.next = 28;\n              return saveMessageToFirebase(values);\n\n            case 28:\n              result = _context.sent;\n\n              if (result) {\n                setTimeout(function () {\n                  setInputState({\n                    inputValue: ['', '', '', ''],\n                    alert: {\n                      message: \"Thank you for your message. I'll get back to you soon.\",\n                      color: 'go'\n                    },\n                    activeInput: null\n                  });\n                }, 2500);\n              } else {\n                setTimeout(function () {\n                  setInputState(stateUpdateValue('failed'));\n                }, 2500);\n              }\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _submitHandler.apply(this, arguments);\n  }\n\n  return __jsx(InputData.Provider, {\n    value: {\n      alert: state.alert,\n      inputValue: state.inputValue,\n      activeInput: state.activeInput,\n      setValues: setvalues,\n      submitHandler: submitHandler\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, props.children);\n}\n\n_s(InputDataContext, \"a0PWcCKHXEJeoIVU+hKCfbYAKb4=\");\n\n_c = InputDataContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputDataContext\");","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/context/inputContext.js"],"names":["React","useState","createContext","checkValue","stateUpdateValue","saveMessageToFirebase","InputData","InputDataContext","props","inputValue","alert","message","color","activeInput","state","setState","setInputState","newState","setvalues","val","i","input","values","submitHandler","name","email","result","setTimeout","setValues","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from 'react'\r\nimport {checkValue, stateUpdateValue} from '../common/inputValidation'\r\nimport {saveMessageToFirebase} from '../sessiondata/saveMessage'\r\n\r\n// export InputContext \r\nexport const InputData = createContext()\r\n\r\n// the props is received and has a value that references\r\n// the input data sets and returns data for the message form\r\nexport function InputDataContext (props) {\r\n\r\n  const [state, setState] = useState({\r\n    inputValue: ['', '', '', ''],\r\n    alert: {\r\n      message: '* required',\r\n      color: 'go'\r\n    },\r\n    activeInput: null\r\n  })\r\n\r\n  // this function updates the state\r\n  function setInputState (newState) {\r\n    setState({\r\n      ...state,\r\n      ...newState\r\n    })\r\n  }\r\n  \r\n  // this function updates each values \r\n  // in the array of input values\r\n  function setvalues(val, i, input){\r\n    let values = state.inputValue\r\n    values[i] = val\r\n    setInputState({ \r\n      inputValue: values,\r\n      activeInput: input\r\n    })\r\n  }\r\n\r\n  // handle the submit event by validating if every\r\n  // values in the input are valid. if not we will return \r\n  // a object that we be updated on the state. \r\n  async function submitHandler () {\r\n    let values = state.inputValue\r\n    let name = checkValue('name', values[0])\r\n    let email = checkValue('email', values[1])\r\n    let message = checkValue('message', values[3])\r\n\r\n    if(name === 'nameIsEmpty'){\r\n      setInputState(stateUpdateValue(name))\r\n    } else if(name === 'hasNumber'){\r\n      setInputState(stateUpdateValue(name))\r\n      return \r\n    } else if (email === 'emailIsEmpty') {\r\n      setInputState(stateUpdateValue(email))\r\n    } else if (email === 'emailIsInvalid') {\r\n      setInputState(stateUpdateValue(email))\r\n    } else if (message === 'messageIsEmpty') {\r\n      setInputState(stateUpdateValue(message))\r\n    } else {\r\n      setInputState(stateUpdateValue('process'))\r\n      let result = await saveMessageToFirebase(values)\r\n      if(result) {\r\n        setTimeout(()=> {\r\n          setInputState({\r\n            inputValue: ['', '', '', ''],\r\n            alert: {\r\n              message: `Thank you for your message. I'll get back to you soon.`,\r\n              color: 'go'\r\n            },\r\n            activeInput: null\r\n          })\r\n        }, 2500)\r\n      } else {\r\n        setTimeout(() => {\r\n          setInputState(stateUpdateValue('failed'))\r\n        }, 2500)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <InputData.Provider value={{\r\n        alert: state.alert, \r\n        inputValue: state.inputValue,\r\n        activeInput: state.activeInput,\r\n        setValues: setvalues,\r\n        submitHandler: submitHandler}}>\r\n      {props.children}\r\n    </InputData.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}