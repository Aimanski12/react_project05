{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n// import {sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp, checkRoute} from './commonfunctions'\n// import axios from 'axios'\n// function to check page session. return boolean\nexport function checkforsession() {\n  return _checkforsession.apply(this, arguments);\n} // // functionto update the session\n// async function updateSession(id, route, exp) {\n//   let url = generateUrl('visitor')\n//   let routeUrl = `${url}/${id}/routesVisited/routesSeen.json`\n//   let routes = await getRoutesVisited(routeUrl)\n//   routes.push(route)\n//   axios.put(`${url}/${id}/routesVisited/routesSeen.json`, routes)\n//     .then(res => {\n//       if (res.data) {\n//         if (exp) setSession(id)\n//       }\n//     })\n//     .catch(err => {\n//       if (err) {\n//         new Promise.reject(err)\n//         if (exp) setSession(id)\n//       }\n//     })\n// }\n// // function to collect the visited routes from firebase\n// async function getRoutesVisited(routeUrl) {\n//   let routes = []\n//   await axios.get(routeUrl)\n//     .then(res => {\n//       if (res.data) {\n//         routes = res.data\n//       }\n//     })\n//     .catch(err => {\n//       if (err) {\n//         routes = ['there was an error']\n//       }\n//     })\n//   return await routes\n// }\n// async function saveDataToFirebase(route) {\n//   let _id = false\n//   let userIp = await getIP()\n//   let user = getUserData()\n//   let time = getTime('timeOfVisit')\n//   let routesVisited = {\n//     initial: route,\n//     routesSeen: [route]\n//   }\n//   // generate visited url\n//   let url = generateUrl('visitor')\n//   await axios.post(`${url}.json`, {\n//       userIp,\n//       user,\n//       time,\n//       routesVisited\n//     })\n//     .then(res => {\n//       if (res.data)\n//         _id = res.data.name\n//     })\n//     .catch(err => {\n//       if (err) new Promise.reject(err)\n//     })\n//   return await _id\n// }\n// export function setSession(id) {\n//   let data = {\n//     _isVisited: true,\n//     _id: id,\n//     timeStamp: getTime('now'),\n//   }\n//   sessionStorage.setItem('websession', JSON.stringify(data))\n// }\n\nfunction _checkforsession() {\n  _checkforsession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var s;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            s = JSON.parse(window.sessionStorage.websession);\n            console.log(s); // let route = checkRoute(window.location.pathname)\n            // let session = sessionStore\n            // let hasSession;\n            // if(session) {\n            //   let isExp = checkIfExp(session.timeStamp)\n            //   if(isExp){\n            //     hasSession = false\n            //     updateSession(session._id, route, true)\n            //   } else {\n            //     hasSession = true\n            //     updateSession(session._id, route, false)\n            //   }\n            // } else {\n            //   hasSession = false\n            //   let _id = await saveDataToFirebase(route)\n            //   setSession(_id)\n            // }\n            // return hasSession\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkforsession.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/sessiondata/sessionStorage.js"],"names":["checkforsession","s","JSON","parse","window","sessionStorage","websession","console","log"],"mappings":";;AAAA;AACA;AAEA;AACA,gBAAsBA,eAAtB;AAAA;AAAA,C,CAyBA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;8EArGO;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,CADD,GACKC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,cAAP,CAAsBC,UAAjC,CADL;AAELC,YAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ,EAFK,CAGL;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAtBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// import {sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp, checkRoute} from './commonfunctions'\r\n// import axios from 'axios'\r\n\r\n// function to check page session. return boolean\r\nexport async function checkforsession () {\r\n  const s = JSON.parse(window.sessionStorage.websession)\r\n  console.log(s)\r\n  // let route = checkRoute(window.location.pathname)\r\n  // let session = sessionStore\r\n  // let hasSession;\r\n  \r\n  // if(session) {\r\n  //   let isExp = checkIfExp(session.timeStamp)\r\n  //   if(isExp){\r\n  //     hasSession = false\r\n  //     updateSession(session._id, route, true)\r\n  //   } else {\r\n  //     hasSession = true\r\n  //     updateSession(session._id, route, false)\r\n  //   }\r\n  // } else {\r\n  //   hasSession = false\r\n  //   let _id = await saveDataToFirebase(route)\r\n  //   setSession(_id)\r\n  // }\r\n\r\n  // return hasSession\r\n}\r\n\r\n// // functionto update the session\r\n// async function updateSession(id, route, exp) {\r\n//   let url = generateUrl('visitor')\r\n//   let routeUrl = `${url}/${id}/routesVisited/routesSeen.json`\r\n\r\n//   let routes = await getRoutesVisited(routeUrl)\r\n//   routes.push(route)\r\n\r\n//   axios.put(`${url}/${id}/routesVisited/routesSeen.json`, routes)\r\n//     .then(res => {\r\n//       if (res.data) {\r\n//         if (exp) setSession(id)\r\n//       }\r\n//     })\r\n//     .catch(err => {\r\n//       if (err) {\r\n//         new Promise.reject(err)\r\n//         if (exp) setSession(id)\r\n//       }\r\n//     })\r\n// }\r\n\r\n// // function to collect the visited routes from firebase\r\n// async function getRoutesVisited(routeUrl) {\r\n//   let routes = []\r\n//   await axios.get(routeUrl)\r\n//     .then(res => {\r\n//       if (res.data) {\r\n//         routes = res.data\r\n//       }\r\n//     })\r\n//     .catch(err => {\r\n//       if (err) {\r\n//         routes = ['there was an error']\r\n//       }\r\n//     })\r\n//   return await routes\r\n// }\r\n\r\n\r\n// async function saveDataToFirebase(route) {\r\n//   let _id = false\r\n//   let userIp = await getIP()\r\n//   let user = getUserData()\r\n//   let time = getTime('timeOfVisit')\r\n//   let routesVisited = {\r\n//     initial: route,\r\n//     routesSeen: [route]\r\n//   }\r\n\r\n//   // generate visited url\r\n//   let url = generateUrl('visitor')\r\n\r\n//   await axios.post(`${url}.json`, {\r\n//       userIp,\r\n//       user,\r\n//       time,\r\n//       routesVisited\r\n//     })\r\n//     .then(res => {\r\n//       if (res.data)\r\n//         _id = res.data.name\r\n//     })\r\n//     .catch(err => {\r\n//       if (err) new Promise.reject(err)\r\n//     })\r\n//   return await _id\r\n// }\r\n\r\n// export function setSession(id) {\r\n//   let data = {\r\n//     _isVisited: true,\r\n//     _id: id,\r\n//     timeStamp: getTime('now'),\r\n//   }\r\n//   sessionStorage.setItem('websession', JSON.stringify(data))\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}