{"ast":null,"code":"import { sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp } from './commonfunctions';\nimport { checkRoute } from '../common/common';\nimport axios from 'axios'; // function to check page session. return boolean\n\nexport async function checkforsession() {\n  const session = sessionStore();\n  let route = checkRoute(window.location.pathname);\n  let hasSession;\n\n  if (session) {\n    let isExp = checkIfExp(session.timeStamp);\n\n    if (isExp) {\n      hasSession = false;\n      updateSession(session._id, route, true);\n    } else {\n      hasSession = true;\n      updateSession(session._id, route, false);\n    }\n  } else {\n    hasSession = false;\n\n    let _id = await saveDataToFirebase(route);\n\n    setSession(_id);\n  }\n\n  return hasSession;\n} // functionto update the session\n\nasync function updateSession(id, route, exp) {\n  let url = generateUrl('visitor');\n  let routeUrl = `${url}/${id}/routesVisited/routesSeen.json`;\n  let routes = await getRoutesVisited(routeUrl);\n  routes.push(route);\n  axios.put(`${url}/${id}/routesVisited/routesSeen.json`, routes).then(res => {\n    if (res.data) {\n      if (exp) setSession(id);\n    }\n  }).catch(err => {\n    if (err) {\n      new Promise.reject(err);\n      if (exp) setSession(id);\n    }\n  });\n} // function to collect the visited routes from firebase\n\n\nasync function getRoutesVisited(routeUrl) {\n  let routes = [];\n  await axios.get(routeUrl).then(res => {\n    if (res.data) {\n      routes = res.data;\n    }\n  }).catch(err => {\n    if (err) {\n      routes = ['there was an error'];\n    }\n  });\n  return await routes;\n}\n\nasync function saveDataToFirebase(route) {\n  let _id = false;\n  let userIp = await getIP();\n  let user = getUserData();\n  let time = getTime('timeOfVisit');\n  let routesVisited = {\n    initial: route,\n    routesSeen: [route]\n  }; // generate visited url\n\n  let url = generateUrl('visitor');\n  await axios.post(`${url}.json`, {\n    userIp,\n    user,\n    time,\n    routesVisited\n  }).then(res => {\n    if (res.data) _id = res.data.name;\n  }).catch(err => {\n    if (err) new Promise.reject(err);\n  });\n  return await _id;\n}\n\nexport function setSession(id) {\n  let data = {\n    _isVisited: true,\n    _id: id,\n    timeStamp: getTime('now')\n  };\n  sessionStorage.setItem('websession', JSON.stringify(data));\n}","map":null,"metadata":{},"sourceType":"module"}