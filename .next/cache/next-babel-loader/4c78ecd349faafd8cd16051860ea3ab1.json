{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\utils\\\\context\\\\pageContext.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext } from 'react';\nimport { findData } from '../data/index'; // export PageData for contextapi access\n\nexport var PageData = createContext(); // the props is received and has a value that references\n// the page data sets and returns data for that page\n\nexport function PageDataContext(props) {\n  var data = sortProps(props);\n  return __jsx(PageData.Provider, {\n    value: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, props.children);\n} // this function will sort the data provided in the props\n// it will return a set of data from the data page\n\n_c = PageDataContext;\n\nfunction sortProps(props) {\n  if (props.pagesets) {\n    return findData(props.pagesets);\n  } else if (props.projectsets) {\n    var data = findData('projectlists').listofprojects.filter(function (proj) {\n      return proj.title === props.projectsets;\n    });\n    return _objectSpread(_objectSpread({}, data[0]), findData('socials'));\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PageDataContext\");","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/context/pageContext.js"],"names":["React","createContext","findData","PageData","PageDataContext","props","data","sortProps","children","pagesets","projectsets","listofprojects","filter","proj","title"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAAQC,QAAR,QAAuB,eAAvB,C,CAEA;;AACA,OAAO,IAAMC,QAAQ,GAAGF,aAAa,EAA9B,C,CAEP;AACA;;AACA,OAAO,SAASG,eAAT,CAA0BC,KAA1B,EAAiC;AACtC,MAAIC,IAAI,GAAGC,SAAS,CAACF,KAAD,CAApB;AACA,SACE,MAAC,QAAD,CAAU,QAAV;AAAmB,IAAA,KAAK,EAAEC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACG,QADT,CADF;AAKD,C,CAED;AACA;;KAVgBJ,e;;AAWhB,SAASG,SAAT,CAAoBF,KAApB,EAA2B;AACzB,MAAGA,KAAK,CAACI,QAAT,EAAmB;AACjB,WAAOP,QAAQ,CAACG,KAAK,CAACI,QAAP,CAAf;AACD,GAFD,MAEO,IAAGJ,KAAK,CAACK,WAAT,EAAqB;AAC1B,QAAIJ,IAAI,GAAGJ,QAAQ,CAAC,cAAD,CAAR,CAAyBS,cAAzB,CAAwCC,MAAxC,CAA+C,UAAAC,IAAI,EAAI;AAChE,aAAOA,IAAI,CAACC,KAAL,KAAeT,KAAK,CAACK,WAA5B;AACD,KAFU,CAAX;AAGA,2CAAWJ,IAAI,CAAC,CAAD,CAAf,GAAuBJ,QAAQ,CAAC,SAAD,CAA/B;AACD;AACF","sourcesContent":["import React, { createContext } from 'react'\r\nimport {findData} from '../data/index'\r\n\r\n// export PageData for contextapi access\r\nexport const PageData = createContext()\r\n\r\n// the props is received and has a value that references\r\n// the page data sets and returns data for that page\r\nexport function PageDataContext (props) {\r\n  let data = sortProps(props)\r\n  return (\r\n    <PageData.Provider value={data}>\r\n      {props.children}\r\n    </PageData.Provider>\r\n  )\r\n}\r\n\r\n// this function will sort the data provided in the props\r\n// it will return a set of data from the data page\r\nfunction sortProps (props) {\r\n  if(props.pagesets) {\r\n    return findData(props.pagesets)\r\n  } else if(props.projectsets){\r\n    let data = findData('projectlists').listofprojects.filter(proj => {\r\n      return proj.title === props.projectsets\r\n    })\r\n    return {...data[0], ...findData('socials')}\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}