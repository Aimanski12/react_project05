{"ast":null,"code":"// check if a string is empty\nconst ifEmptyString = /^\\s*\\S+.*/; // check if a string contains a number\n\nconst stringContainsNumber = /\\d/; // check if email is valid\n\nconst isEmailValid = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/; // function to check if the name input is invalid\n\nexport function checkValue(input, value) {\n  let valueIsNotEmpty = ifEmptyString.test(value);\n  let valueHasNumber = stringContainsNumber.test(value);\n  let emailIsValid = isEmailValid.test(value);\n\n  if (input === 'name') {\n    if (!valueIsNotEmpty) return 'nameIsEmpty';\n    if (valueHasNumber) return 'hasNumber';\n  } else if (input === 'email') {\n    if (!valueIsNotEmpty) return 'emailIsEmpty';\n    if (!emailIsValid) return 'emailIsInvalid';\n  } else if (input === 'message') {\n    if (!valueIsNotEmpty) return 'messageIsEmpty';\n  }\n} // function that will check for the value returned from \n// the validation and then return an object for the state\n\nexport function stateUpdateValue(val) {\n  if (val === 'nameIsEmpty') {\n    return state('Please enter your full name.', 'alert', 'name');\n  } else if (val === 'hasNumber') {\n    return state('Please enter a valid name', 'alert', 'name');\n  } else if (val === 'emailIsEmpty') {\n    return state('Please enter your email.', 'alert', 'email');\n  } else if (val === 'emailIsInvalid') {\n    return state('Please provide a valid email.', 'alert', 'email');\n  } else if (val === 'messageIsEmpty') {\n    return state('Please enter your message.', 'alert', 'message');\n  } else if (val === 'process') {\n    return state('Processing . . .', 'warning', null);\n  } else if (val === 'failed') {\n    return state('Aww... It looks like there is a problem with your connection.', 'warning', null);\n  }\n}\n\nfunction state(text, alert, input) {\n  return {\n    alert: {\n      message: text,\n      color: alert\n    },\n    activeInput: input\n  };\n}","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/common/inputValidation.js"],"names":["ifEmptyString","stringContainsNumber","isEmailValid","checkValue","input","value","valueIsNotEmpty","test","valueHasNumber","emailIsValid","stateUpdateValue","val","state","text","alert","message","color","activeInput"],"mappings":"AACA;AACA,MAAMA,aAAa,GAAG,WAAtB,C,CACA;;AACA,MAAMC,oBAAoB,GAAG,IAA7B,C,CACA;;AACA,MAAMC,YAAY,GAAG,+CAArB,C,CAEA;;AACA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkC;AACvC,MAAIC,eAAe,GAAGN,aAAa,CAACO,IAAd,CAAmBF,KAAnB,CAAtB;AACA,MAAIG,cAAc,GAAGP,oBAAoB,CAACM,IAArB,CAA0BF,KAA1B,CAArB;AACA,MAAII,YAAY,GAAGP,YAAY,CAACK,IAAb,CAAkBF,KAAlB,CAAnB;;AAEA,MAAID,KAAK,KAAK,MAAd,EAAsB;AACpB,QAAI,CAACE,eAAL,EAAsB,OAAO,aAAP;AACtB,QAAIE,cAAJ,EAAoB,OAAO,WAAP;AACrB,GAHD,MAGO,IAAIJ,KAAK,KAAK,OAAd,EAAuB;AAC5B,QAAI,CAACE,eAAL,EAAsB,OAAO,cAAP;AACtB,QAAI,CAACG,YAAL,EAAmB,OAAO,gBAAP;AACpB,GAHM,MAGA,IAAIL,KAAK,KAAK,SAAd,EAAyB;AAC9B,QAAI,CAACE,eAAL,EAAsB,OAAO,gBAAP;AACvB;AACF,C,CAED;AACA;;AACA,OAAO,SAASI,gBAAT,CAA0BC,GAA1B,EAA+B;AACpC,MAAIA,GAAG,KAAK,aAAZ,EAA2B;AACzB,WAAOC,KAAK,CAAC,8BAAD,EAAiC,OAAjC,EAA0C,MAA1C,CAAZ;AACD,GAFD,MAEO,IAAID,GAAG,KAAK,WAAZ,EAAyB;AAC9B,WAAOC,KAAK,CAAC,2BAAD,EAA8B,OAA9B,EAAuC,MAAvC,CAAZ;AACD,GAFM,MAEA,IAAID,GAAG,KAAK,cAAZ,EAA4B;AACjC,WAAOC,KAAK,CAAC,0BAAD,EAA6B,OAA7B,EAAsC,OAAtC,CAAZ;AACD,GAFM,MAEA,IAAID,GAAG,KAAK,gBAAZ,EAA8B;AACnC,WAAOC,KAAK,CAAC,+BAAD,EAAkC,OAAlC,EAA2C,OAA3C,CAAZ;AACD,GAFM,MAEA,IAAID,GAAG,KAAK,gBAAZ,EAA8B;AACnC,WAAOC,KAAK,CAAC,4BAAD,EAA+B,OAA/B,EAAwC,SAAxC,CAAZ;AACD,GAFM,MAEA,IAAID,GAAG,KAAK,SAAZ,EAAuB;AAC5B,WAAOC,KAAK,CAAC,kBAAD,EAAqB,SAArB,EAAgC,IAAhC,CAAZ;AACD,GAFM,MAEA,IAAID,GAAG,KAAK,QAAZ,EAAsB;AAC3B,WAAOC,KAAK,CAAC,+DAAD,EAAkE,SAAlE,EAA6E,IAA7E,CAAZ;AACD;AACF;;AAGD,SAASA,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4BV,KAA5B,EAAmC;AACjC,SAAO;AACLU,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEF,IADJ;AAELG,MAAAA,KAAK,EAAEF;AAFF,KADF;AAKLG,IAAAA,WAAW,EAAEb;AALR,GAAP;AAOD","sourcesContent":["\r\n// check if a string is empty\r\nconst ifEmptyString = /^\\s*\\S+.*/\r\n// check if a string contains a number\r\nconst stringContainsNumber = /\\d/\r\n// check if email is valid\r\nconst isEmailValid = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\r\n\r\n// function to check if the name input is invalid\r\nexport function checkValue(input, value) {\r\n  let valueIsNotEmpty = ifEmptyString.test(value)\r\n  let valueHasNumber = stringContainsNumber.test(value)\r\n  let emailIsValid = isEmailValid.test(value)\r\n\r\n  if (input === 'name') {\r\n    if (!valueIsNotEmpty) return 'nameIsEmpty'\r\n    if (valueHasNumber) return 'hasNumber'\r\n  } else if (input === 'email') {\r\n    if (!valueIsNotEmpty) return 'emailIsEmpty'\r\n    if (!emailIsValid) return 'emailIsInvalid'\r\n  } else if (input === 'message') {\r\n    if (!valueIsNotEmpty) return 'messageIsEmpty'\r\n  }\r\n}\r\n\r\n// function that will check for the value returned from \r\n// the validation and then return an object for the state\r\nexport function stateUpdateValue(val) {\r\n  if (val === 'nameIsEmpty') {\r\n    return state('Please enter your full name.', 'alert', 'name')\r\n  } else if (val === 'hasNumber') {\r\n    return state('Please enter a valid name', 'alert', 'name')\r\n  } else if (val === 'emailIsEmpty') {\r\n    return state('Please enter your email.', 'alert', 'email')\r\n  } else if (val === 'emailIsInvalid') {\r\n    return state('Please provide a valid email.', 'alert', 'email')\r\n  } else if (val === 'messageIsEmpty') {\r\n    return state('Please enter your message.', 'alert', 'message')\r\n  } else if (val === 'process') {\r\n    return state('Processing . . .', 'warning', null)\r\n  } else if (val === 'failed') {\r\n    return state('Aww... It looks like there is a problem with your connection.', 'warning', null)\r\n  }\r\n}\r\n\r\n\r\nfunction state(text, alert, input) {\r\n  return {\r\n    alert: {\r\n      message: text,\r\n      color: alert\r\n    },\r\n    activeInput: input\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}