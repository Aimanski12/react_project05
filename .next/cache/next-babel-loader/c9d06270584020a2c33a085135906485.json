{"ast":null,"code":"import { UAParser } from 'ua-parser-js';\nimport axios from 'axios'; // get sessionStorage\n// export const sessionStore = JSON.parse(sessionStore.getItem('websession'))\n\nexport function sessionStore() {\n  let session = window.sessionStorage.websession;\n\n  if (session === undefined) {\n    return false;\n  } else {\n    return JSON.parse(session);\n  }\n} // firebase url\n\nconst firebaseUrl = 'https://aimanadlawansite.firebaseio.com'; // function to generate firebase url\n\nexport function generateUrl(urlDirection) {\n  const d = getTime('url');\n  let url = `${firebaseUrl}/${urlDirection}/${d.y}/${d.m}/${d.dy}_${d.de}`;\n  return url;\n} // function to get user data\n\nexport const getUserData = () => {\n  let parser = new UAParser();\n  return parser.getResult();\n}; // get user device data\n\nexport const getIP = async () => {\n  let userIp;\n  await axios.get('https://ipapi.co/json/').then(res => {\n    if (res.status === 200) {\n      if (res.data) {\n        let data = res.data;\n        userIp = {\n          cap: data.country_capital,\n          city: data.city,\n          country: data.country_name,\n          ip: data.ip,\n          lat: data.latitude,\n          long: data.longitude,\n          timeZ: data.timezone,\n          region: data.region,\n          postC: data.postal,\n          internet: data.org\n        };\n      }\n    }\n  }).catch(err => {\n    if (err) {\n      userIp = {\n        blocked: 'User blocked this data.'\n      };\n    }\n  });\n  return await userIp;\n}; // check if the session has expired\n\nexport function checkIfExp(time) {\n  let now = getTime('now');\n  let runTime = Math.floor((now - time) / 1000 / 60);\n\n  if (runTime >= 60) {\n    return true;\n  } else {\n    return false;\n  }\n} // function to get time\n\nexport const getTime = url => {\n  const date = new Date();\n  let d = date.getDate();\n  let month = date.getMonth(); // get time for url structure query\n\n  if (url === 'url') {\n    return {\n      y: date.getFullYear(),\n      m: `${n(month + 1)}_${mn[date.getMonth()]}`,\n      dy: n(d),\n      de: dt[date.getDay()]\n    };\n  } else if (url === 'timeOfVisit') {\n    // get time for the time of visit\n    return {\n      time: `${date.getHours()}: ${date.getMinutes()}: ${date.getSeconds()}`\n    };\n  } else if (url === 'now') {\n    // get time for the time of visit\n    return date.getTime();\n  }\n}; // filter number if data is single digit\n\nconst n = d => {\n  return d < 10 ? `0${d}` : d;\n}; // set the month to the exact number index of the array\n\n\nconst mn = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // set the day to the exact number index of the array\n\nconst dt = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nlet routes = ['home', 'about', 'projects', 'contacts', 'privacy', 'credentials', 'projects/projects/music-app', 'projects/reservation-app', 'projects/electric-bill', 'projects/music-player3', 'projects/music-player4', 'projects/music-player5']; // this function will generate a return the current route\n// for the state\n\nexport const checkRoute = route => {\n  let r = route.slice(1, 50);\n  let url = r === '' ? 'home' : r;\n  let b;\n  let a = routes.filter(route => {\n    return route === url;\n  });\n\n  if (a[0] === undefined) {\n    b = 'notFound';\n  } else {\n    b = a[0];\n  }\n\n  return b;\n};","map":null,"metadata":{},"sourceType":"module"}