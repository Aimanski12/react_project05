{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, createContext } from 'react';\nimport { setTransitionState } from '../pageanimations/motion/common'; // global state context route\n\nexport var StateContext = createContext(); // state provder\n\nexport var StateProvider = /*#__PURE__*/function (_Component) {\n  _inherits(StateProvider, _Component);\n\n  var _super = _createSuper(StateProvider);\n\n  function StateProvider() {\n    var _this;\n\n    _classCallCheck(this, StateProvider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      activeRoute: 'home',\n      menuIsOpen: false,\n      menuIsAnimating: false,\n      isTransitioning: 'initial',\n      exitMode: false,\n      animation: 'initial'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setApplicationState\", function (newState) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), newState));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTransitionState\", function (from) {\n      if (from === 'top') {\n        _this.setState({\n          menuIsOpen: !_this.state.menuIsOpen,\n          exitMode: mode(from),\n          isTransitioning: setTransitionState(_this.state.isTransitioning),\n          animation: animmode(from)\n        });\n      }\n\n      if (from === 'bottom') {\n        _this.setState({\n          exitMode: mode(from),\n          isTransitioning: setTransitionState(_this.state.isTransitioning),\n          animation: animmode(from)\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setActiveRoute\", function (route) {\n      // if the current route does not match to the old route\n      // then update the active route state\n      if (route != _this.state.activeRoute) {\n        _this.setApplicationState({\n          activeRoute: route\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(StateProvider, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(StateContext.Provider, {\n        value: {\n          state: this.state,\n          setState: this.setApplicationState,\n          setActiveRoute: this.setActiveRoute,\n          setTransitionState: this.setTransitionState\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return StateProvider;\n}(Component); // this function checks if the menu button is click\n// and will return a string that will animate from the top\n\nvar mode = function mode(from) {\n  return from === 'top' ? 'topExit' : 'bottomExit';\n}; // this function checks if any of the button links \n// in the bottom is click that will run the transition\n\n\nvar animmode = function animmode(from) {\n  return from === 'bottom' ? 'topAnimation' : 'bottomAnimation';\n};","map":null,"metadata":{},"sourceType":"module"}