{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, createContext } from 'react';\nimport { checkValue, stateUpdateValue } from '../common/inputValidation';\nimport { saveMessageToFirebase } from '../sessiondata/saveMessage'; // export InputContext \n\nexport const InputData = createContext(); // the props is received and has a value that references\n// the input data sets and returns data for the message form\n\nexport function InputDataContext(props) {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    inputValue: ['', '', '', ''],\n    alert: {\n      message: '* required',\n      color: 'go'\n    },\n    activeInput: null\n  }); // this function updates the state\n\n  function setInputState(newState) {\n    setState(_objectSpread(_objectSpread({}, state), newState));\n  } // this function updates each values \n  // in the array of input values\n\n\n  function setvalues(val, i, input) {\n    let values = state.inputValue;\n    values[i] = val;\n    setInputState({\n      inputValue: values,\n      activeInput: input\n    });\n  } // handle the submit event by validating if every\n  // values in the input are valid. if not we will return \n  // a object that we be updated on the state. \n\n\n  async function submitHandler() {\n    let values = state.inputValue;\n    let name = checkValue('name', values[0]);\n    let email = checkValue('email', values[1]);\n    let message = checkValue('message', values[3]);\n\n    if (name === 'nameIsEmpty') {\n      setInputState(stateUpdateValue(name));\n    } else if (name === 'hasNumber') {\n      setInputState(stateUpdateValue(name));\n      return;\n    } else if (email === 'emailIsEmpty') {\n      setInputState(stateUpdateValue(email));\n    } else if (email === 'emailIsInvalid') {\n      setInputState(stateUpdateValue(email));\n    } else if (message === 'messageIsEmpty') {\n      setInputState(stateUpdateValue(message));\n    } else {\n      setInputState(stateUpdateValue('process'));\n      let result = await saveMessageToFirebase(values);\n\n      if (result) {\n        setTimeout(() => {\n          setInputState({\n            inputValue: ['', '', '', ''],\n            alert: {\n              message: `Thank you for your message. I'll get back to you soon.`,\n              color: 'go'\n            },\n            activeInput: null\n          });\n        }, 2500);\n      } else {\n        setTimeout(() => {\n          setInputState(stateUpdateValue('failed'));\n        }, 2500);\n      }\n    }\n  }\n\n  return __jsx(InputData.Provider, {\n    value: {\n      alert: state.alert,\n      inputValue: state.inputValue,\n      activeInput: state.activeInput,\n      setValues: setvalues,\n      submitHandler: submitHandler\n    }\n  }, props.children);\n}","map":null,"metadata":{},"sourceType":"module"}