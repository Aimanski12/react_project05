{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, createContext } from 'react';\nimport { checkValue, stateUpdateValue } from '../common/inputValidation';\nimport { saveMessageToFirebase } from '../sessiondata/saveMessage'; // export InputContext \n\nexport var InputData = createContext(); // the props is received and has a value that references\n// the input data sets and returns data for the message form\n\nexport function InputDataContext(props) {\n  var _useState = useState({\n    inputValue: ['', '', '', ''],\n    alert: {\n      message: '* required',\n      color: 'go'\n    },\n    activeInput: null\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // this function updates the state\n\n\n  function setInputState(newState) {\n    setState(_objectSpread(_objectSpread({}, state), newState));\n  } // this function updates each values \n  // in the array of input values\n\n\n  function setvalues(val, i, input) {\n    var values = state.inputValue;\n    values[i] = val;\n    setInputState({\n      inputValue: values,\n      activeInput: input\n    });\n  } // handle the submit event by validating if every\n  // values in the input are valid. if not we will return \n  // a object that we be updated on the state. \n\n\n  function submitHandler() {\n    return _submitHandler.apply(this, arguments);\n  }\n\n  function _submitHandler() {\n    _submitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var values, name, email, message, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              values = state.inputValue;\n              name = checkValue('name', values[0]);\n              email = checkValue('email', values[1]);\n              message = checkValue('message', values[3]);\n\n              if (!(name === 'nameIsEmpty')) {\n                _context.next = 8;\n                break;\n              }\n\n              setInputState(stateUpdateValue(name));\n              _context.next = 30;\n              break;\n\n            case 8:\n              if (!(name === 'hasNumber')) {\n                _context.next = 13;\n                break;\n              }\n\n              setInputState(stateUpdateValue(name));\n              return _context.abrupt(\"return\");\n\n            case 13:\n              if (!(email === 'emailIsEmpty')) {\n                _context.next = 17;\n                break;\n              }\n\n              setInputState(stateUpdateValue(email));\n              _context.next = 30;\n              break;\n\n            case 17:\n              if (!(email === 'emailIsInvalid')) {\n                _context.next = 21;\n                break;\n              }\n\n              setInputState(stateUpdateValue(email));\n              _context.next = 30;\n              break;\n\n            case 21:\n              if (!(message === 'messageIsEmpty')) {\n                _context.next = 25;\n                break;\n              }\n\n              setInputState(stateUpdateValue(message));\n              _context.next = 30;\n              break;\n\n            case 25:\n              setInputState(stateUpdateValue('process'));\n              _context.next = 28;\n              return saveMessageToFirebase(values);\n\n            case 28:\n              result = _context.sent;\n\n              if (result) {\n                setTimeout(function () {\n                  setInputState({\n                    inputValue: ['', '', '', ''],\n                    alert: {\n                      message: \"Thank you for your message. I'll get back to you soon.\",\n                      color: 'go'\n                    },\n                    activeInput: null\n                  });\n                }, 2500);\n              } else {\n                setTimeout(function () {\n                  setInputState(stateUpdateValue('failed'));\n                }, 2500);\n              }\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _submitHandler.apply(this, arguments);\n  }\n\n  return __jsx(InputData.Provider, {\n    value: {\n      alert: state.alert,\n      inputValue: state.inputValue,\n      activeInput: state.activeInput,\n      setValues: setvalues,\n      submitHandler: submitHandler\n    }\n  }, props.children);\n}","map":null,"metadata":{},"sourceType":"module"}