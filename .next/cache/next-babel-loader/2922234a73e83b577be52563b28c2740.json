{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\utils\\\\context\\\\stateContext.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext } from 'react';\nimport { setTransitionState } from '../pageanimations/motion/common'; // global state context route\n\nexport const StateContext = createContext(); // state provder\n\nexport class StateProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      activeRoute: 'home',\n      menuIsOpen: false,\n      menuIsAnimating: false,\n      isTransitioning: 'initial',\n      exitMode: false,\n      animation: 'initial',\n      inputvalues: ['', '', '', ''],\n      alert: '* required'\n    });\n\n    _defineProperty(this, \"setApplicationState\", newState => {\n      this.setState(_objectSpread(_objectSpread({}, this.state), newState));\n    });\n\n    _defineProperty(this, \"setTransitionState\", from => {\n      if (from === 'top') {\n        this.setState({\n          menuIsOpen: !this.state.menuIsOpen,\n          exitMode: mode(from),\n          isTransitioning: setTransitionState(this.state.isTransitioning),\n          animation: animmode(from)\n        });\n      }\n\n      if (from === 'bottom') {\n        this.setState({\n          exitMode: mode(from),\n          isTransitioning: setTransitionState(this.state.isTransitioning),\n          animation: animmode(from)\n        });\n      }\n    });\n\n    _defineProperty(this, \"setActiveRoute\", route => {\n      // if the current route does not match to the old route\n      // then update the active route state\n      if (route != this.state.activeRoute) {\n        this.setApplicationState({\n          activeRoute: route\n        });\n      }\n    });\n  }\n\n  render() {\n    return __jsx(StateContext.Provider, {\n      value: {\n        state: this.state,\n        setState: this.setApplicationState,\n        setActiveRoute: this.setActiveRoute,\n        setTransitionState: this.setTransitionState\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst mode = from => {\n  return from === 'top' ? 'topExit' : 'bottomExit';\n};\n\nconst animmode = from => {\n  return from === 'bottom' ? 'topAnimation' : 'bottomAnimation';\n};","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/context/stateContext.js"],"names":["React","Component","createContext","setTransitionState","StateContext","StateProvider","activeRoute","menuIsOpen","menuIsAnimating","isTransitioning","exitMode","animation","inputvalues","alert","newState","setState","state","from","mode","animmode","route","setApplicationState","render","setActiveRoute","props","children"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,aAA1B,QAA8C,OAA9C;AACA,SAAQC,kBAAR,QAAiC,iCAAjC,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAGF,aAAa,EAAlC,C,CAEP;;AACA,OAAO,MAAMG,aAAN,SAA4BJ,SAA5B,CAAsC;AAAA;AAAA;;AAAA,mCAGpC;AACLK,MAAAA,WAAW,EAAE,MADR;AAELC,MAAAA,UAAU,EAAE,KAFP;AAGLC,MAAAA,eAAe,EAAE,KAHZ;AAILC,MAAAA,eAAe,EAAE,SAJZ;AAKLC,MAAAA,QAAQ,EAAE,KALL;AAMLC,MAAAA,SAAS,EAAE,SANN;AAOLC,MAAAA,WAAW,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAPR;AAQLC,MAAAA,KAAK,EAAE;AARF,KAHoC;;AAAA,iDAepBC,QAAD,IAAc;AAClC,WAAKC,QAAL,iCACK,KAAKC,KADV,GAEKF,QAFL;AAID,KApB0C;;AAAA,gDAwBrBG,IAAD,IAAU;AAC7B,UAAGA,IAAI,KAAK,KAAZ,EAAkB;AAChB,aAAKF,QAAL,CAAc;AACZR,UAAAA,UAAU,EAAE,CAAC,KAAKS,KAAL,CAAWT,UADZ;AAEZG,UAAAA,QAAQ,EAAEQ,IAAI,CAACD,IAAD,CAFF;AAGZR,UAAAA,eAAe,EAAEN,kBAAkB,CAAC,KAAKa,KAAL,CAAWP,eAAZ,CAHvB;AAIZE,UAAAA,SAAS,EAAEQ,QAAQ,CAACF,IAAD;AAJP,SAAd;AAMD;;AACD,UAAGA,IAAI,KAAK,QAAZ,EAAsB;AACpB,aAAKF,QAAL,CAAc;AACZL,UAAAA,QAAQ,EAAEQ,IAAI,CAACD,IAAD,CADF;AAEZR,UAAAA,eAAe,EAAEN,kBAAkB,CAAC,KAAKa,KAAL,CAAWP,eAAZ,CAFvB;AAGZE,UAAAA,SAAS,EAAEQ,QAAQ,CAACF,IAAD;AAHP,SAAd;AAKD;AACF,KAxC0C;;AAAA,4CA2CzBG,KAAD,IAAW;AAC1B;AACA;AACA,UAAGA,KAAK,IAAI,KAAKJ,KAAL,CAAWV,WAAvB,EAAmC;AACjC,aAAKe,mBAAL,CAAyB;AAAEf,UAAAA,WAAW,EAAEc;AAAf,SAAzB;AACD;AACF,KAjD0C;AAAA;;AAmD3CE,EAAAA,MAAM,GAAE;AAEN,WACE,MAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAE;AAC5BN,QAAAA,KAAK,EAAE,KAAKA,KADgB;AAE5BD,QAAAA,QAAQ,EAAE,KAAKM,mBAFa;AAG5BE,QAAAA,cAAc,EAAE,KAAKA,cAHO;AAI5BpB,QAAAA,kBAAkB,EAAE,KAAKA;AAJG,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKqB,KAAL,CAAWC,QANd,CADF;AAUD;;AA/D0C;;AAkE7C,MAAMP,IAAI,GAAID,IAAD,IAAU;AACrB,SAAOA,IAAI,KAAK,KAAT,GAAiB,SAAjB,GAA6B,YAApC;AACD,CAFD;;AAIA,MAAME,QAAQ,GAAIF,IAAD,IAAU;AACzB,SAAOA,IAAI,KAAK,QAAT,GAAoB,cAApB,GAAqC,iBAA5C;AACD,CAFD","sourcesContent":["import React, {Component, createContext} from 'react'\r\nimport {setTransitionState} from '../pageanimations/motion/common'\r\n\r\n// global state context route\r\nexport const StateContext = createContext()\r\n\r\n// state provder\r\nexport class StateProvider extends Component {\r\n  \r\n  // initial\r\n  state= {\r\n    activeRoute: 'home',\r\n    menuIsOpen: false,\r\n    menuIsAnimating: false,\r\n    isTransitioning: 'initial',\r\n    exitMode: false,\r\n    animation: 'initial',\r\n    inputvalues: ['', '', '', ''],\r\n    alert: '* required'\r\n  }\r\n\r\n  // function that will set update the state\r\n  setApplicationState = (newState) => {\r\n    this.setState({\r\n      ...this.state,\r\n      ...newState\r\n    })\r\n  }\r\n\r\n  // this function will update the state based from \r\n  // where the button is clicked\r\n  setTransitionState = (from) => {\r\n    if(from === 'top'){\r\n      this.setState({\r\n        menuIsOpen: !this.state.menuIsOpen,\r\n        exitMode: mode(from),\r\n        isTransitioning: setTransitionState(this.state.isTransitioning),\r\n        animation: animmode(from)\r\n      })\r\n    }\r\n    if(from === 'bottom') {\r\n      this.setState({\r\n        exitMode: mode(from),\r\n        isTransitioning: setTransitionState(this.state.isTransitioning),\r\n        animation: animmode(from)\r\n      })\r\n    }\r\n  }\r\n\r\n  // function to get the current route\r\n  setActiveRoute = (route) => {\r\n    // if the current route does not match to the old route\r\n    // then update the active route state\r\n    if(route != this.state.activeRoute){\r\n      this.setApplicationState({ activeRoute: route })\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    return(\r\n      <StateContext.Provider value={{\r\n        state: this.state,\r\n        setState: this.setApplicationState,\r\n        setActiveRoute: this.setActiveRoute,\r\n        setTransitionState: this.setTransitionState\r\n      }}>\r\n        {this.props.children}\r\n      </StateContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nconst mode = (from) => {\r\n  return from === 'top' ? 'topExit' : 'bottomExit'\r\n}\r\n\r\nconst animmode = (from) => {\r\n  return from === 'bottom' ? 'topAnimation' : 'bottomAnimation'\r\n}"]},"metadata":{},"sourceType":"module"}