{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\utils\\\\context\\\\inputContext.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, createContext } from 'react'; // export InputContext \n\nexport var InputData = createContext(); // check if a string is empty\n\nvar ifEmptyString = /^\\s*\\S+.*/; // check if a string contains a number\n\nvar stringContainsNumber = /\\d/; // the props is received and has a value that references\n// the input data sets and returns data for the message form\n\nexport function InputDataContext(props) {\n  _s();\n\n  var _useState = useState({\n    inputValue: ['', '', '', ''],\n    alert: {\n      message: '* required',\n      color: 'go'\n    },\n    activeInput: null\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // this function updates the state\n\n\n  function setInputState(newState) {\n    setState(_objectSpread(_objectSpread({}, state), newState));\n  } // this function updates each values \n  // in the array of input values\n\n\n  function setvalues(val, i) {\n    var values = state.inputValue;\n    values[i] = val;\n    setInputState({\n      inputValue: values\n    });\n  }\n\n  function submitHandler() {\n    var isAllValidInput = checkIfInputIsValid();\n    console.log(isAllValidInput);\n  }\n\n  function checkIfInputIsValid() {\n    var result = false;\n\n    for (var x = 0; x < 4; x++) {\n      if (!checkName(state.inputValue[x]).result) {\n        break;\n      }\n    }\n\n    return result;\n  }\n\n  return __jsx(InputData.Provider, {\n    value: {\n      alert: state.alert,\n      inputValue: state.inputValue,\n      activeInput: state.activeInput,\n      setValues: setvalues,\n      submitHandler: submitHandler\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, props.children);\n}\n\n_s(InputDataContext, \"a0PWcCKHXEJeoIVU+hKCfbYAKb4=\");\n\n_c = InputDataContext;\n\nfunction checkName(value) {\n  var nameIsNotEmpty = ifEmptyString.test(value);\n  var nameIsValid = stringContainsNumber.test(value);\n\n  if (!nameIsNotEmpty) {\n    return {\n      result: false,\n      alert: {\n        message: 'Please enter your name.',\n        color: 'alert'\n      },\n      activeInput: 'name'\n    };\n  } else if (nameIsValid) {\n    return {\n      result: false,\n      alert: {\n        message: 'Please enter a valid name.',\n        color: 'alert'\n      },\n      activeInput: 'name'\n    };\n  } else {\n    return {\n      result: true\n    };\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"InputDataContext\");","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/context/inputContext.js"],"names":["React","useState","createContext","InputData","ifEmptyString","stringContainsNumber","InputDataContext","props","inputValue","alert","message","color","activeInput","state","setState","setInputState","newState","setvalues","val","i","values","submitHandler","isAllValidInput","checkIfInputIsValid","console","log","result","x","checkName","setValues","children","value","nameIsNotEmpty","test","nameIsValid"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from 'react'\r\n\r\n// export InputContext \r\nexport const InputData = createContext()\r\n\r\n// check if a string is empty\r\nconst ifEmptyString = /^\\s*\\S+.*/\r\n// check if a string contains a number\r\nconst stringContainsNumber = /\\d/\r\n\r\n// the props is received and has a value that references\r\n// the input data sets and returns data for the message form\r\nexport function InputDataContext (props) {\r\n\r\n  const [state, setState] = useState({\r\n    inputValue: ['', '', '', ''],\r\n    alert: {\r\n      message: '* required',\r\n      color: 'go'\r\n    },\r\n    activeInput: null\r\n  })\r\n\r\n  // this function updates the state\r\n  function setInputState (newState) {\r\n    setState({\r\n      ...state,\r\n      ...newState\r\n    })\r\n  }\r\n  \r\n  // this function updates each values \r\n  // in the array of input values\r\n  function setvalues(val, i){\r\n    let values = state.inputValue\r\n    values[i] = val\r\n    setInputState({ inputValue: values })\r\n  }\r\n\r\n  function submitHandler () {\r\n    let isAllValidInput = checkIfInputIsValid()\r\n    console.log(isAllValidInput)\r\n  }\r\n  \r\n  \r\n  function checkIfInputIsValid () {\r\n    let result = false\r\n\r\n    for (let x = 0; x < 4; x++){\r\n      if(!checkName(state.inputValue[x]).result) {\r\n\r\n        break\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  return (\r\n    <InputData.Provider value={{\r\n        alert: state.alert, \r\n        inputValue: state.inputValue,\r\n        activeInput: state.activeInput,\r\n        setValues: setvalues,\r\n        submitHandler: submitHandler}}>\r\n      {props.children}\r\n    </InputData.Provider>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction checkName (value){\r\n  let nameIsNotEmpty = ifEmptyString.test(value)\r\n  let nameIsValid = stringContainsNumber.test(value)\r\n\r\n  if(!nameIsNotEmpty) {\r\n    return {\r\n      result: false,\r\n      alert: {\r\n        message: 'Please enter your name.',\r\n        color: 'alert',\r\n      },\r\n      activeInput: 'name'\r\n    }\r\n  } else if(nameIsValid){\r\n    return {\r\n      result: false,\r\n      alert: {\r\n        message: 'Please enter a valid name.',\r\n        color: 'alert',\r\n      },\r\n      activeInput: 'name'\r\n    }\r\n  } else {\r\n    return {\r\n      result: true\r\n    }\r\n  }\r\n    \r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module"}