{"ast":null,"code":"import { sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp } from './commonfunctions';\nimport { checkRoute } from '../common/common';\nimport axios from 'axios'; // function to check page session. return boolean\n\nexport async function checkforsession() {\n  const session = sessionStore();\n  let route = checkRoute(window.location.pathname);\n  let hasSession;\n\n  if (session) {\n    let isExp = checkIfExp(session.timeStamp);\n\n    if (isExp) {\n      hasSession = false;\n      updateSession(session._id, route, true);\n    } else {\n      hasSession = true;\n      updateSession(session._id, route, false);\n    }\n  } else {\n    hasSession = false;\n\n    let _id = await saveDataToFirebase(route);\n\n    setSession(_id);\n  }\n\n  return hasSession;\n} // functionto update the session\n\nasync function updateSession(id, route, exp) {\n  let url = generateUrl('visitor');\n  let routeUrl = `${url}/${id}/routesVisited/routesSeen.json`;\n  let routes = await getRoutesVisited(routeUrl);\n  routes.push(route);\n  axios.put(`${url}/${id}/routesVisited/routesSeen.json`, routes).then(res => {\n    if (res.data) {\n      if (exp) setSession(id);\n    }\n  }).catch(err => {\n    if (err) {\n      new Promise.reject(err);\n      if (exp) setSession(id);\n    }\n  });\n} // function to collect the visited routes from firebase\n\n\nasync function getRoutesVisited(routeUrl) {\n  let routes = [];\n  await axios.get(routeUrl).then(res => {\n    if (res.data) {\n      routes = res.data;\n    }\n  }).catch(err => {\n    if (err) {\n      routes = ['there was an error'];\n    }\n  });\n  return await routes;\n}\n\nasync function saveDataToFirebase(route) {\n  let _id = false;\n  let userIp = await getIP();\n  let user = getUserData();\n  let time = getTime('timeOfVisit');\n  let routesVisited = {\n    initial: route,\n    routesSeen: [route]\n  }; // generate visited url\n\n  let url = generateUrl('visitor');\n  console.log('asdf');\n  await axios.post(`${url}.json`, {\n    userIp,\n    user,\n    time,\n    routesVisited\n  }).then(res => {\n    if (res.data) _id = res.data.name;\n  }).catch(err => {\n    if (err) new Promise.reject(err);\n  });\n  return await _id;\n}\n\nexport function setSession(id) {\n  let data = {\n    _isVisited: true,\n    _id: id,\n    timeStamp: getTime('now')\n  };\n  sessionStorage.setItem('websession', JSON.stringify(data));\n}","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/sessiondata/sessionStorage.js"],"names":["sessionStore","getUserData","getIP","generateUrl","getTime","checkIfExp","checkRoute","axios","checkforsession","session","route","window","location","pathname","hasSession","isExp","timeStamp","updateSession","_id","saveDataToFirebase","setSession","id","exp","url","routeUrl","routes","getRoutesVisited","push","put","then","res","data","catch","err","Promise","reject","get","userIp","user","time","routesVisited","initial","routesSeen","console","log","post","name","_isVisited","sessionStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import {sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp} from './commonfunctions'\r\nimport {checkRoute} from '../common/common'\r\nimport axios from 'axios'\r\n\r\n// function to check page session. return boolean\r\nexport async function checkforsession () {\r\n  \r\n  const session = sessionStore()\r\n\r\n  let route = checkRoute(window.location.pathname)\r\n  let hasSession;\r\n  \r\n  if(session) {\r\n    let isExp = checkIfExp(session.timeStamp)\r\n    if(isExp){\r\n      hasSession = false\r\n      updateSession(session._id, route, true)\r\n    } else {\r\n      hasSession = true\r\n      updateSession(session._id, route, false)\r\n    }\r\n  } else {\r\n    hasSession = false\r\n    let _id = await saveDataToFirebase(route)\r\n    setSession(_id)\r\n  }\r\n\r\n  return hasSession\r\n}\r\n\r\n// functionto update the session\r\nasync function updateSession(id, route, exp) {\r\n  let url = generateUrl('visitor')\r\n  let routeUrl = `${url}/${id}/routesVisited/routesSeen.json`\r\n\r\n  let routes = await getRoutesVisited(routeUrl)\r\n  routes.push(route)\r\n\r\n  axios.put(`${url}/${id}/routesVisited/routesSeen.json`, routes)\r\n    .then(res => {\r\n      if (res.data) {\r\n        if (exp) setSession(id)\r\n      }\r\n    })\r\n    .catch(err => {\r\n      if (err) {\r\n        new Promise.reject(err)\r\n        if (exp) setSession(id)\r\n      }\r\n    })\r\n}\r\n\r\n// function to collect the visited routes from firebase\r\nasync function getRoutesVisited(routeUrl) {\r\n  let routes = []\r\n  await axios.get(routeUrl)\r\n    .then(res => {\r\n      if (res.data) {\r\n        routes = res.data\r\n      }\r\n    })\r\n    .catch(err => {\r\n      if (err) {\r\n        routes = ['there was an error']\r\n      }\r\n    })\r\n  return await routes\r\n}\r\n\r\n\r\nasync function saveDataToFirebase(route) {\r\n  let _id = false\r\n  let userIp = await getIP()\r\n  let user = getUserData()\r\n  let time = getTime('timeOfVisit')\r\n  let routesVisited = {\r\n    initial: route,\r\n    routesSeen: [route]\r\n  }\r\n\r\n  // generate visited url\r\n  let url = generateUrl('visitor')\r\n  console.log('asdf')\r\n\r\n  await axios.post(`${url}.json`, {\r\n      userIp,\r\n      user,\r\n      time,\r\n      routesVisited\r\n    })\r\n    .then(res => {\r\n      if (res.data)\r\n        _id = res.data.name\r\n    })\r\n    .catch(err => {\r\n      if (err) new Promise.reject(err)\r\n    })\r\n  return await _id\r\n}\r\n\r\nexport function setSession(id) {\r\n  let data = {\r\n    _isVisited: true,\r\n    _id: id,\r\n    timeStamp: getTime('now'),\r\n  }\r\n  sessionStorage.setItem('websession', JSON.stringify(data))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}