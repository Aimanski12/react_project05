{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react'; // import {connect} from 'react-redux'\n// import * as action from '../../../store/actions/index'\n// import {mouseOut, mouseEnter} from '../../../utils/common/menuHoverEvents'\n// import {openMenu, closeMenu} from '../../../utils/common/menuClickEvents'\n// import {navHoverElements} from '../../../utils/common/elementSorter'\n// import anime from 'animejs'\n\nimport Close from '../../../components/Svgs/Close/Close'; // import './NavbarMenu.css'\n\nimport { PageData } from '../../../utils/context/pageContext';\n\nvar NavbarMenu = /*#__PURE__*/function (_Component) {\n  _inherits(NavbarMenu, _Component);\n\n  var _super = _createSuper(NavbarMenu);\n\n  function NavbarMenu() {\n    _classCallCheck(this, NavbarMenu);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NavbarMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var data = this.context.headers; // console.log(data)\n      // click event \n\n      var clicked = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!_this.props.isAnimating) {\n                    setAnimate(true);\n\n                    if (!_this.props.isOpen) {\n                      openMenuBtn();\n                    } else {\n                      closeMenuBtn();\n                    }\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function clicked() {\n          return _ref.apply(this, arguments);\n        };\n      }(); // close menu function\n\n\n      var closeMenuBtn = function closeMenuBtn() {\n        var el = navHoverElements(); // call function to close animation\n\n        closeMenu(true); // set is animating after 1700 milsec to block multiple click events\n\n        setAnimate(false);\n        var n = document.querySelector('.navbar-container');\n        var tl = anime.timeline({\n          easing: 'easeInQuad',\n          duration: 200\n        });\n        tl.add({\n          targets: n,\n          opacity: 0\n        }).add({\n          duration: 10,\n          complete: function complete(anim) {\n            this.props.setMenu(!this.props.isOpen);\n          }\n        }).add({\n          targets: n,\n          opacity: 1,\n          complete: function complete(anim) {\n            el.middle.style.color = this.props.colorModes.close.main;\n          }\n        });\n      }; // open menu function\n\n\n      var openMenuBtn = function openMenuBtn() {\n        // call function to open menu animtion\n        openMenu(); // set is animating after 1700 milsec to block multiple click events\n\n        setAnimate(false);\n        var n = document.querySelector('.navbar-container');\n        var tl = anime.timeline({\n          easing: 'easeInQuad',\n          duration: 200\n        });\n        tl.add({\n          targets: n,\n          opacity: 0\n        }).add({\n          duration: 10,\n          complete: function complete(anim) {\n            this.props.setMenu(!this.props.isOpen);\n          }\n        }).add({\n          targets: n,\n          opacity: 1\n        });\n      }; // function to set isanimating state\n\n\n      var setAnimate = function setAnimate(isAnim) {\n        isAnim ? _this.props.setAnimating(isAnim) : setTimeout(function () {\n          _this.props.setAnimating(false);\n        }, 1700);\n      }; // hover in functions and to set specific assigned colors\n\n\n      var hoverIn = function hoverIn() {\n        _this.props.isOpen ? mouseEnter(_this.props.colorModes.open, 'open') : mouseEnter(_this.props.colorModes.close, 'close');\n      }; // hover out functions and to set specific assigned colors\n\n\n      var hoverOut = function hoverOut() {\n        _this.props.isOpen ? mouseOut(_this.props.colorModes.open, 'open') : mouseOut(_this.props.colorModes.close, 'close');\n      }; // console.log(this.props.isAnimating)\n\n\n      return __jsx(\"div\", {\n        className: \"navbar-menu\"\n      }, __jsx(\"div\", {\n        className: \"front content-center\"\n      }, __jsx(\"span\", {\n        className: \"content-center front-text\",\n        style: {\n          'color': data.colormodes.close.foreground\n        },\n        onMouseOver: hoverIn,\n        onMouseLeave: hoverOut,\n        onClick: clicked\n      }, this.props.isOpen ? __jsx(Close, null) : 'Menu')), __jsx(\"div\", {\n        className: \"middle content-center\"\n      }, __jsx(\"span\", {\n        className: \"middle-span\"\n      })), __jsx(\"div\", {\n        className: \"back content-center\"\n      }, __jsx(\"span\", {\n        className: \"back-span\"\n      })));\n    }\n  }]);\n\n  return NavbarMenu;\n}(Component); // const mapStateToProps = (state) => {\n//   return {\n//     colorModes: state.state.colorModes,\n//     isOpen: state.state.isOpen,\n//     isAnimating: state.state.isAnimating,\n//     activeRoute: state.state.activeRoute\n//   }\n// }\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     setAnimating: (val) => { dispatch(action.setAnimating(val)) },\n//     setMenu: (val) => { dispatch(action.menuIsOpen(val)) }\n//   }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(NavbarMenu)\n\n\n_defineProperty(NavbarMenu, \"contextType\", PageData);\n\nexport default NavbarMenu;","map":null,"metadata":{},"sourceType":"module"}