{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\components\\\\Navbar\\\\NavbarMenu\\\\NavbarMenu.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport Close from '../../Svgs/Close/Close';\nimport { mouseEnter, mouseOut } from '../../../utils/pageanimations/navbarmenu/menuHoverEvents';\nimport { openMenu, closeMenu } from '../../../utils/pageanimations/navbarmenu/menuClickEvents';\nimport { fadeNavbar } from '../../../utils/pageanimations/navbarmenu/navbartransition';\nimport { PageData } from '../../../utils/context/pageContext';\nimport { StateContext } from '../../../utils/context/stateContext';\nimport { motion } from 'framer-motion';\n\nfunction NavbarMenu() {\n  const {\n    0: isHovered,\n    1: setHover\n  } = useState(false);\n  const {\n    headers\n  } = useContext(PageData);\n  const {\n    state,\n    setState\n  } = useContext(StateContext); // hover in functions and to set specific assigned colors\n\n  const hoverIn = () => {\n    state.menuIsOpen ? mouseEnter(headers.colormodes.open, 'open') : mouseEnter(headers.colormodes.close, 'close');\n  }; // hover out functions and to set specific assigned colors\n\n\n  const hoverOut = () => {\n    state.menuIsOpen ? mouseOut(headers.colormodes.open, 'open') : mouseOut(headers.colormodes.close, 'close');\n  }; // click events\n\n\n  const click = () => {\n    // fade the navbar\n    fadeNavbar(); //check if menu is not animating. if false then\n    // execute the animation\n\n    if (!state.menuIsAnimating) {\n      // change the global state after 200ms fade transition\n      // from the navbar\n      setTimeout(() => {\n        setState({\n          menuIsOpen: !state.menuIsOpen,\n          menuIsAnimating: true\n        });\n      }, 200); // then call the animation whether the close or open the menu\n\n      state.menuIsOpen ? closeMenu(true) : openMenu(); // the set timeout will make a set the menuIsAnimating\n      // state back to false after 1700ms.\n\n      setTimeout(() => {\n        setState({\n          menuIsAnimating: false\n        });\n      }, 1700);\n    }\n  };\n\n  let colors = state.menuIsOpen ? headers.colormodes.open : headers.colormodes.close;\n  console.log(isHovered);\n  const transition = {\n    duration: .2\n  };\n  const buttonAnims = {\n    frontInitial: {\n      color: colors.foreground,\n      transition: {\n        transition\n      }\n    },\n    frontAnim: {\n      color: colors.background,\n      fill: colors.background,\n      transition: {\n        transition\n      }\n    },\n    middleInitial: {\n      color: colors.foreground,\n      transition: {\n        transition\n      }\n    },\n    middleAnim: {\n      color: colors.background,\n      fill: colors.background,\n      transition: {\n        transition\n      }\n    },\n    backInitial: {\n      opacity: 0,\n      transition: {\n        transition\n      }\n    },\n    backAnim: {\n      background: colors.foreground,\n      opacity: 1,\n      width: '90%',\n      transition: {\n        transition\n      }\n    }\n  };\n  return __jsx(\"div\", {\n    className: \"navbar-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"front content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, __jsx(motion.span, {\n    className: \"content-center front-text\",\n    style: {\n      color: headers.colormodes.close.foreground\n    },\n    variants: buttonAnims,\n    whileHover: \"frontAnim\",\n    initial: \"frontInitial\",\n    animate: \"\",\n    onMouseOver: () => setHover(!isHovered),\n    onMouseLeave: () => setHover(!isHovered) // onClick={click}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, state.menuIsOpen ? __jsx(Close, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 33\n    }\n  }) : 'Menu')), __jsx(\"div\", {\n    className: \"middle content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, __jsx(motion.span, {\n    variants: buttonAnims,\n    initial: \"\",\n    animation: \"\",\n    className: \"middle-span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"back content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(motion.span, {\n    initial: \"backInitial\" // animate={isHovered ? 'backAnim' : ''}\n    ,\n    whileHover: \"backAnim\",\n    className: \"back-span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default NavbarMenu; // function NavbarMenu () {\n//   const {headers} = useContext(PageData)\n//   const {state, setState} = useContext(StateContext)\n//   // hover in functions and to set specific assigned colors\n//   const hoverIn = () => {\n//     state.menuIsOpen ? mouseEnter(headers.colormodes.open, 'open') :\n//      mouseEnter(headers.colormodes.close, 'close')\n//   }\n//   // hover out functions and to set specific assigned colors\n//   const hoverOut = () => {\n//     state.menuIsOpen ? mouseOut(headers.colormodes.open, 'open') :\n//       mouseOut(headers.colormodes.close, 'close')\n//   }\n//   // click events\n//   const click = () => {\n//     // fade the navbar\n//     fadeNavbar()\n//     //check if menu is not animating. if false then\n//     // execute the animation\n//     if(!state.menuIsAnimating){\n//       // change the global state after 200ms fade transition\n//       // from the navbar\n//       setTimeout(()=>{\n//         setState({\n//           menuIsOpen: !state.menuIsOpen,\n//           menuIsAnimating: true\n//         })\n//       }, 200)\n//       // then call the animation whether the close or open the menu\n//       state.menuIsOpen ? closeMenu(true) : openMenu()\n//       // the set timeout will make a set the menuIsAnimating\n//       // state back to false after 1700ms.\n//       setTimeout(()=>{\n//         setState({ menuIsAnimating: false })\n//       }, 1700)\n//     }\n//   }\n//   return (\n//     <div className=\"navbar-menu\">\n//       <div className=\"front content-center\">\n//         <span className=\"content-center front-text\"\n//           style={{'color': headers.colormodes.close.foreground}}\n//           onMouseOver={hoverIn}\n//           onMouseLeave={hoverOut}\n//           onClick={click}>\n//             {state.menuIsOpen ? <Close /> : 'Menu'}</span>  \n//       </div>\n//       <div className=\"middle content-center\">\n//         <span className=\"middle-span\"></span>\n//       </div>\n//       <div className=\"back content-center\">\n//         <span className=\"back-span\"></span>\n//       </div>\n//     </div>\n//   )\n// }\n// export default NavbarMenu","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/components/Navbar/NavbarMenu/NavbarMenu.js"],"names":["React","useContext","useState","Close","mouseEnter","mouseOut","openMenu","closeMenu","fadeNavbar","PageData","StateContext","motion","NavbarMenu","isHovered","setHover","headers","state","setState","hoverIn","menuIsOpen","colormodes","open","close","hoverOut","click","menuIsAnimating","setTimeout","colors","console","log","transition","duration","buttonAnims","frontInitial","color","foreground","frontAnim","background","fill","middleInitial","middleAnim","backInitial","opacity","backAnim","width"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react'\r\nimport Close from '../../Svgs/Close/Close'\r\nimport {mouseEnter, mouseOut} from '../../../utils/pageanimations/navbarmenu/menuHoverEvents'\r\nimport {openMenu, closeMenu} from '../../../utils/pageanimations/navbarmenu/menuClickEvents'\r\nimport {fadeNavbar} from '../../../utils/pageanimations/navbarmenu/navbartransition'\r\nimport {PageData} from '../../../utils/context/pageContext'\r\nimport {StateContext} from '../../../utils/context/stateContext'\r\nimport {motion} from 'framer-motion'\r\n\r\nfunction NavbarMenu () {\r\n  const [isHovered, setHover] = useState(false)\r\n  const {headers} = useContext(PageData)\r\n  const {state, setState} = useContext(StateContext)\r\n\r\n  // hover in functions and to set specific assigned colors\r\n  const hoverIn = () => {\r\n    state.menuIsOpen ? mouseEnter(headers.colormodes.open, 'open') :\r\n     mouseEnter(headers.colormodes.close, 'close')\r\n  }\r\n\r\n  // hover out functions and to set specific assigned colors\r\n  const hoverOut = () => {\r\n    state.menuIsOpen ? mouseOut(headers.colormodes.open, 'open') :\r\n      mouseOut(headers.colormodes.close, 'close')\r\n  }\r\n\r\n  // click events\r\n  const click = () => {\r\n    // fade the navbar\r\n    fadeNavbar()\r\n    //check if menu is not animating. if false then\r\n    // execute the animation\r\n    if(!state.menuIsAnimating){\r\n      // change the global state after 200ms fade transition\r\n      // from the navbar\r\n      setTimeout(()=>{\r\n        setState({\r\n          menuIsOpen: !state.menuIsOpen,\r\n          menuIsAnimating: true\r\n        })\r\n      }, 200)\r\n      // then call the animation whether the close or open the menu\r\n      state.menuIsOpen ? closeMenu(true) : openMenu()\r\n      // the set timeout will make a set the menuIsAnimating\r\n      // state back to false after 1700ms.\r\n      setTimeout(()=>{\r\n        setState({ menuIsAnimating: false })\r\n      }, 1700)\r\n    }\r\n  }\r\n  let colors = state.menuIsOpen ? \r\n                  headers.colormodes.open : headers.colormodes.close\r\n  console.log(isHovered)\r\n  const transition = { duration: .2 }\r\n\r\n  const buttonAnims = {\r\n    frontInitial: {\r\n      color: colors.foreground,\r\n      transition: { transition }\r\n    },\r\n    frontAnim: {\r\n      color: colors.background,\r\n      fill: colors.background,\r\n      transition: { transition }\r\n    },\r\n    middleInitial: {\r\n      color: colors.foreground,\r\n      transition: { transition }\r\n    },\r\n    middleAnim: {\r\n      color: colors.background,\r\n      fill: colors.background,\r\n      transition: { transition }\r\n    },\r\n    backInitial: {\r\n      opacity: 0,\r\n      transition: { transition }\r\n    },\r\n    backAnim: {\r\n      background: colors.foreground,\r\n      opacity: 1,\r\n      width: '90%',\r\n      transition: { transition }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"navbar-menu\">\r\n      <div className=\"front content-center\">\r\n        <motion.span className=\"content-center front-text\"\r\n          style={{color: headers.colormodes.close.foreground}}\r\n          variants={buttonAnims}\r\n          whileHover='frontAnim'\r\n          initial='frontInitial'\r\n          animate=''\r\n          onMouseOver={()=>setHover(!isHovered)}\r\n          onMouseLeave={()=>setHover(!isHovered)}\r\n          // onClick={click}\r\n          >\r\n            {state.menuIsOpen ? <Close /> : 'Menu'}</motion.span>  \r\n      </div>\r\n      <div className=\"middle content-center\">\r\n        <motion.span \r\n          variants={buttonAnims}\r\n          initial=''\r\n          animation=''\r\n          className=\"middle-span\"></motion.span>\r\n      </div>\r\n      <div className=\"back content-center\">\r\n        <motion.span \r\n          initial='backInitial'\r\n          // animate={isHovered ? 'backAnim' : ''}\r\n          whileHover='backAnim'\r\n          className=\"back-span\"></motion.span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavbarMenu\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function NavbarMenu () {\r\n//   const {headers} = useContext(PageData)\r\n//   const {state, setState} = useContext(StateContext)\r\n\r\n//   // hover in functions and to set specific assigned colors\r\n//   const hoverIn = () => {\r\n//     state.menuIsOpen ? mouseEnter(headers.colormodes.open, 'open') :\r\n//      mouseEnter(headers.colormodes.close, 'close')\r\n//   }\r\n\r\n//   // hover out functions and to set specific assigned colors\r\n//   const hoverOut = () => {\r\n//     state.menuIsOpen ? mouseOut(headers.colormodes.open, 'open') :\r\n//       mouseOut(headers.colormodes.close, 'close')\r\n//   }\r\n\r\n//   // click events\r\n//   const click = () => {\r\n//     // fade the navbar\r\n//     fadeNavbar()\r\n//     //check if menu is not animating. if false then\r\n//     // execute the animation\r\n//     if(!state.menuIsAnimating){\r\n//       // change the global state after 200ms fade transition\r\n//       // from the navbar\r\n//       setTimeout(()=>{\r\n//         setState({\r\n//           menuIsOpen: !state.menuIsOpen,\r\n//           menuIsAnimating: true\r\n//         })\r\n//       }, 200)\r\n//       // then call the animation whether the close or open the menu\r\n//       state.menuIsOpen ? closeMenu(true) : openMenu()\r\n//       // the set timeout will make a set the menuIsAnimating\r\n//       // state back to false after 1700ms.\r\n//       setTimeout(()=>{\r\n//         setState({ menuIsAnimating: false })\r\n//       }, 1700)\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"navbar-menu\">\r\n//       <div className=\"front content-center\">\r\n//         <span className=\"content-center front-text\"\r\n//           style={{'color': headers.colormodes.close.foreground}}\r\n//           onMouseOver={hoverIn}\r\n//           onMouseLeave={hoverOut}\r\n//           onClick={click}>\r\n//             {state.menuIsOpen ? <Close /> : 'Menu'}</span>  \r\n//       </div>\r\n//       <div className=\"middle content-center\">\r\n//         <span className=\"middle-span\"></span>\r\n//       </div>\r\n//       <div className=\"back content-center\">\r\n//         <span className=\"back-span\"></span>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default NavbarMenu"]},"metadata":{},"sourceType":"module"}