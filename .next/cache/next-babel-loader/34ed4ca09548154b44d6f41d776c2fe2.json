{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Button from '../Svgs/Logos/Logos';\nimport WithBox from './WithBox/WithBox';\n\nvar Buttons = /*#__PURE__*/function (_Component) {\n  _inherits(Buttons, _Component);\n\n  var _super = _createSuper(Buttons);\n\n  function Buttons() {\n    _classCallCheck(this, Buttons);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Buttons, [{\n    key: \"render\",\n    value: function render() {\n      var button;\n\n      if (this.props.type === 'withText') {\n        button = __jsx(Button, {\n          type: this.props.type,\n          colors: this.props.colors\n        });\n      }\n\n      if (this.props.type === 'withBox') {\n        button = __jsx(WithBox, {\n          btnType: this.props.btnType,\n          link: this.props.link,\n          text: this.props.text,\n          withSvg: this.props.withSvg,\n          colors: this.props.colors\n        });\n      }\n\n      if (this.props.type === 'arrow') {\n        button = __jsx(Button, {\n          colors: this.props.colors,\n          type: this.props.type\n        });\n      }\n\n      return button;\n    }\n  }]);\n\n  return Buttons;\n}(Component);\n\nexport default Buttons;","map":null,"metadata":{},"sourceType":"module"}