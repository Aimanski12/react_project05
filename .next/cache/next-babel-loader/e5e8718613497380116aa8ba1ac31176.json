{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp, checkRoute } from './commonfunctions';\nimport axios from 'axios'; // function to check page session. return boolean\n\nexport function checkforsession() {\n  return _checkforsession.apply(this, arguments);\n} // functionto update the session\n\nfunction _checkforsession() {\n  _checkforsession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            session; // const session = JSON.parse(window.sessionStorage.websession)\n            // let route = checkRoute(window.location.pathname)\n            // let hasSession;\n            // if(session) {\n            //   let isExp = checkIfExp(session.timeStamp)\n            //   if(isExp){\n            //     hasSession = false\n            //     updateSession(session._id, route, true)\n            //   } else {\n            //     hasSession = true\n            //     updateSession(session._id, route, false)\n            //   }\n            // } else {\n            //   hasSession = false\n            //   let _id = await saveDataToFirebase(route)\n            //   setSession(_id)\n            // }\n            // return hasSession\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkforsession.apply(this, arguments);\n}\n\nfunction updateSession(_x, _x2, _x3) {\n  return _updateSession.apply(this, arguments);\n} // function to collect the visited routes from firebase\n\n\nfunction _updateSession() {\n  _updateSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, route, exp) {\n    var url, routeUrl, routes;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = generateUrl('visitor');\n            routeUrl = \"\".concat(url, \"/\").concat(id, \"/routesVisited/routesSeen.json\");\n            _context2.next = 4;\n            return getRoutesVisited(routeUrl);\n\n          case 4:\n            routes = _context2.sent;\n            routes.push(route);\n            axios.put(\"\".concat(url, \"/\").concat(id, \"/routesVisited/routesSeen.json\"), routes).then(function (res) {\n              if (res.data) {\n                if (exp) setSession(id);\n              }\n            })[\"catch\"](function (err) {\n              if (err) {\n                new Promise.reject(err);\n                if (exp) setSession(id);\n              }\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _updateSession.apply(this, arguments);\n}\n\nfunction getRoutesVisited(_x4) {\n  return _getRoutesVisited.apply(this, arguments);\n}\n\nfunction _getRoutesVisited() {\n  _getRoutesVisited = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(routeUrl) {\n    var routes;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            routes = [];\n            _context3.next = 3;\n            return axios.get(routeUrl).then(function (res) {\n              if (res.data) {\n                routes = res.data;\n              }\n            })[\"catch\"](function (err) {\n              if (err) {\n                routes = ['there was an error'];\n              }\n            });\n\n          case 3:\n            _context3.next = 5;\n            return routes;\n\n          case 5:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getRoutesVisited.apply(this, arguments);\n}\n\nfunction saveDataToFirebase(_x5) {\n  return _saveDataToFirebase.apply(this, arguments);\n}\n\nfunction _saveDataToFirebase() {\n  _saveDataToFirebase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(route) {\n    var _id, userIp, user, time, routesVisited, url;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _id = false;\n            _context4.next = 3;\n            return getIP();\n\n          case 3:\n            userIp = _context4.sent;\n            user = getUserData();\n            time = getTime('timeOfVisit');\n            routesVisited = {\n              initial: route,\n              routesSeen: [route]\n            }; // generate visited url\n\n            url = generateUrl('visitor');\n            _context4.next = 10;\n            return axios.post(\"\".concat(url, \".json\"), {\n              userIp: userIp,\n              user: user,\n              time: time,\n              routesVisited: routesVisited\n            }).then(function (res) {\n              if (res.data) _id = res.data.name;\n            })[\"catch\"](function (err) {\n              if (err) new Promise.reject(err);\n            });\n\n          case 10:\n            _context4.next = 12;\n            return _id;\n\n          case 12:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _saveDataToFirebase.apply(this, arguments);\n}\n\nexport function setSession(id) {\n  var data = {\n    _isVisited: true,\n    _id: id,\n    timeStamp: getTime('now')\n  };\n  sessionStorage.setItem('websession', JSON.stringify(data));\n}","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/sessiondata/sessionStorage.js"],"names":["sessionStore","getUserData","getIP","generateUrl","getTime","checkIfExp","checkRoute","axios","checkforsession","session","updateSession","id","route","exp","url","routeUrl","getRoutesVisited","routes","push","put","then","res","data","setSession","err","Promise","reject","get","saveDataToFirebase","_id","userIp","user","time","routesVisited","initial","routesSeen","post","name","_isVisited","timeStamp","sessionStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import {sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp, checkRoute} from './commonfunctions'\r\nimport axios from 'axios'\r\n\r\n\r\n// function to check page session. return boolean\r\nexport async function checkforsession () {\r\n  \r\n  session\r\n\r\n\r\n\r\n  // const session = JSON.parse(window.sessionStorage.websession)\r\n\r\n  // let route = checkRoute(window.location.pathname)\r\n  // let hasSession;\r\n  \r\n  // if(session) {\r\n  //   let isExp = checkIfExp(session.timeStamp)\r\n  //   if(isExp){\r\n  //     hasSession = false\r\n  //     updateSession(session._id, route, true)\r\n  //   } else {\r\n  //     hasSession = true\r\n  //     updateSession(session._id, route, false)\r\n  //   }\r\n  // } else {\r\n  //   hasSession = false\r\n  //   let _id = await saveDataToFirebase(route)\r\n  //   setSession(_id)\r\n  // }\r\n\r\n  // return hasSession\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// functionto update the session\r\nasync function updateSession(id, route, exp) {\r\n  let url = generateUrl('visitor')\r\n  let routeUrl = `${url}/${id}/routesVisited/routesSeen.json`\r\n\r\n  let routes = await getRoutesVisited(routeUrl)\r\n  routes.push(route)\r\n\r\n  axios.put(`${url}/${id}/routesVisited/routesSeen.json`, routes)\r\n    .then(res => {\r\n      if (res.data) {\r\n        if (exp) setSession(id)\r\n      }\r\n    })\r\n    .catch(err => {\r\n      if (err) {\r\n        new Promise.reject(err)\r\n        if (exp) setSession(id)\r\n      }\r\n    })\r\n}\r\n\r\n// function to collect the visited routes from firebase\r\nasync function getRoutesVisited(routeUrl) {\r\n  let routes = []\r\n  await axios.get(routeUrl)\r\n    .then(res => {\r\n      if (res.data) {\r\n        routes = res.data\r\n      }\r\n    })\r\n    .catch(err => {\r\n      if (err) {\r\n        routes = ['there was an error']\r\n      }\r\n    })\r\n  return await routes\r\n}\r\n\r\n\r\nasync function saveDataToFirebase(route) {\r\n  let _id = false\r\n  let userIp = await getIP()\r\n  let user = getUserData()\r\n  let time = getTime('timeOfVisit')\r\n  let routesVisited = {\r\n    initial: route,\r\n    routesSeen: [route]\r\n  }\r\n\r\n  // generate visited url\r\n  let url = generateUrl('visitor')\r\n\r\n  await axios.post(`${url}.json`, {\r\n      userIp,\r\n      user,\r\n      time,\r\n      routesVisited\r\n    })\r\n    .then(res => {\r\n      if (res.data)\r\n        _id = res.data.name\r\n    })\r\n    .catch(err => {\r\n      if (err) new Promise.reject(err)\r\n    })\r\n  return await _id\r\n}\r\n\r\nexport function setSession(id) {\r\n  let data = {\r\n    _isVisited: true,\r\n    _id: id,\r\n    timeStamp: getTime('now'),\r\n  }\r\n  sessionStorage.setItem('websession', JSON.stringify(data))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}