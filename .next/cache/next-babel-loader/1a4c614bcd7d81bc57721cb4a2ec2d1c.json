{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport { sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp } from './commonfunctions';\nimport { router } from 'next';\nimport { checkRoute } from '../common/common';\nimport axios from 'axios';\nconsole.log('samp', router); // function to check page session. return boolean\n\nexport function checkforsession() {\n  return _checkforsession.apply(this, arguments);\n} // functionto update the session\n\nfunction _checkforsession() {\n  _checkforsession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var session, route, hasSession, isExp, _id;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            session = sessionStore();\n            route = checkRoute(window.location.pathname);\n\n            if (!session) {\n              _context.next = 7;\n              break;\n            }\n\n            isExp = checkIfExp(session.timeStamp);\n\n            if (isExp) {\n              hasSession = false;\n              updateSession(session._id, route, true);\n            } else {\n              hasSession = true;\n              updateSession(session._id, route, false);\n            }\n\n            _context.next = 12;\n            break;\n\n          case 7:\n            hasSession = false;\n            _context.next = 10;\n            return saveDataToFirebase(route);\n\n          case 10:\n            _id = _context.sent;\n            setSession(_id);\n\n          case 12:\n            return _context.abrupt(\"return\", hasSession);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkforsession.apply(this, arguments);\n}\n\nfunction updateSession(_x, _x2, _x3) {\n  return _updateSession.apply(this, arguments);\n} // function to collect the visited routes from firebase\n\n\nfunction _updateSession() {\n  _updateSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, route, exp) {\n    var url, routeUrl, routes;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = generateUrl('visitor');\n            routeUrl = \"\".concat(url, \"/\").concat(id, \"/routesVisited/routesSeen.json\");\n            _context2.next = 4;\n            return getRoutesVisited(routeUrl);\n\n          case 4:\n            routes = _context2.sent;\n            routes.push(route);\n            axios.put(\"\".concat(url, \"/\").concat(id, \"/routesVisited/routesSeen.json\"), routes).then(function (res) {\n              if (res.data) {\n                if (exp) setSession(id);\n              }\n            })[\"catch\"](function (err) {\n              if (err) {\n                new Promise.reject(err);\n                if (exp) setSession(id);\n              }\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _updateSession.apply(this, arguments);\n}\n\nfunction getRoutesVisited(_x4) {\n  return _getRoutesVisited.apply(this, arguments);\n}\n\nfunction _getRoutesVisited() {\n  _getRoutesVisited = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(routeUrl) {\n    var routes;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            routes = [];\n            _context3.next = 3;\n            return axios.get(routeUrl).then(function (res) {\n              if (res.data) {\n                routes = res.data;\n              }\n            })[\"catch\"](function (err) {\n              if (err) {\n                routes = ['there was an error'];\n              }\n            });\n\n          case 3:\n            _context3.next = 5;\n            return routes;\n\n          case 5:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getRoutesVisited.apply(this, arguments);\n}\n\nfunction saveDataToFirebase(_x5) {\n  return _saveDataToFirebase.apply(this, arguments);\n}\n\nfunction _saveDataToFirebase() {\n  _saveDataToFirebase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(route) {\n    var _id, userIp, user, time, routesVisited, url;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _id = false;\n            _context4.next = 3;\n            return getIP();\n\n          case 3:\n            userIp = _context4.sent;\n            user = getUserData();\n            time = getTime('timeOfVisit');\n            routesVisited = {\n              initial: route,\n              routesSeen: [route]\n            }; // generate visited url\n\n            url = generateUrl('visitor');\n            _context4.next = 10;\n            return axios.post(\"\".concat(url, \".json\"), {\n              userIp: userIp,\n              user: user,\n              time: time,\n              routesVisited: routesVisited\n            }).then(function (res) {\n              if (res.data) _id = res.data.name;\n            })[\"catch\"](function (err) {\n              if (err) new Promise.reject(err);\n            });\n\n          case 10:\n            _context4.next = 12;\n            return _id;\n\n          case 12:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _saveDataToFirebase.apply(this, arguments);\n}\n\nexport function setSession(id) {\n  var data = {\n    _isVisited: true,\n    _id: id,\n    timeStamp: getTime('now')\n  };\n  sessionStorage.setItem('websession', JSON.stringify(data));\n}","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/sessiondata/sessionStorage.js"],"names":["React","sessionStore","getUserData","getIP","generateUrl","getTime","checkIfExp","router","checkRoute","axios","console","log","checkforsession","session","route","window","location","pathname","isExp","timeStamp","hasSession","updateSession","_id","saveDataToFirebase","setSession","id","exp","url","routeUrl","getRoutesVisited","routes","push","put","then","res","data","err","Promise","reject","get","userIp","user","time","routesVisited","initial","routesSeen","post","name","_isVisited","sessionStorage","setItem","JSON","stringify"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {sessionStore, getUserData, getIP, generateUrl, getTime, checkIfExp} from './commonfunctions'\r\nimport {router} from 'next'\r\nimport {checkRoute} from '../common/common'\r\nimport axios from 'axios'\r\n\r\nconsole.log('samp', router)\r\n// function to check page session. return boolean\r\nexport async function checkforsession () {\r\n  \r\n  const session = sessionStore()\r\n\r\n  let route = checkRoute(window.location.pathname)\r\n  let hasSession;\r\n  \r\n  if(session) {\r\n    let isExp = checkIfExp(session.timeStamp)\r\n    if(isExp){\r\n      hasSession = false\r\n      updateSession(session._id, route, true)\r\n    } else {\r\n      hasSession = true\r\n      updateSession(session._id, route, false)\r\n    }\r\n  } else {\r\n    hasSession = false\r\n    let _id = await saveDataToFirebase(route)\r\n    setSession(_id)\r\n  }\r\n\r\n  return hasSession\r\n}\r\n\r\n// functionto update the session\r\nasync function updateSession(id, route, exp) {\r\n  let url = generateUrl('visitor')\r\n  let routeUrl = `${url}/${id}/routesVisited/routesSeen.json`\r\n\r\n  let routes = await getRoutesVisited(routeUrl)\r\n  routes.push(route)\r\n\r\n  axios.put(`${url}/${id}/routesVisited/routesSeen.json`, routes)\r\n    .then(res => {\r\n      if (res.data) {\r\n        if (exp) setSession(id)\r\n      }\r\n    })\r\n    .catch(err => {\r\n      if (err) {\r\n        new Promise.reject(err)\r\n        if (exp) setSession(id)\r\n      }\r\n    })\r\n}\r\n\r\n// function to collect the visited routes from firebase\r\nasync function getRoutesVisited(routeUrl) {\r\n  let routes = []\r\n  await axios.get(routeUrl)\r\n    .then(res => {\r\n      if (res.data) {\r\n        routes = res.data\r\n      }\r\n    })\r\n    .catch(err => {\r\n      if (err) {\r\n        routes = ['there was an error']\r\n      }\r\n    })\r\n  return await routes\r\n}\r\n\r\n\r\nasync function saveDataToFirebase(route) {\r\n  let _id = false\r\n  let userIp = await getIP()\r\n  let user = getUserData()\r\n  let time = getTime('timeOfVisit')\r\n  let routesVisited = {\r\n    initial: route,\r\n    routesSeen: [route]\r\n  }\r\n\r\n  // generate visited url\r\n  let url = generateUrl('visitor')\r\n\r\n  await axios.post(`${url}.json`, {\r\n      userIp,\r\n      user,\r\n      time,\r\n      routesVisited\r\n    })\r\n    .then(res => {\r\n      if (res.data)\r\n        _id = res.data.name\r\n    })\r\n    .catch(err => {\r\n      if (err) new Promise.reject(err)\r\n    })\r\n  return await _id\r\n}\r\n\r\nexport function setSession(id) {\r\n  let data = {\r\n    _isVisited: true,\r\n    _id: id,\r\n    timeStamp: getTime('now'),\r\n  }\r\n  sessionStorage.setItem('websession', JSON.stringify(data))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}