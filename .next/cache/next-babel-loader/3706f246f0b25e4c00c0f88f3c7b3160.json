{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\utils\\\\context\\\\inputContext.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, createContext } from 'react';\nimport { checkValue, stateUpdateValue } from '../common/inputValidation';\nimport { saveMessageToFirebase } from '../sessiondata/saveMessage'; // export InputContext \n\nexport const InputData = createContext(); // the props is received and has a value that references\n// the input data sets and returns data for the message form\n\nexport function InputDataContext(props) {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    inputValue: ['', '', '', ''],\n    alert: {\n      message: '* required',\n      color: 'go'\n    },\n    activeInput: null\n  }); // this function updates the state\n\n  function setInputState(newState) {\n    setState(_objectSpread(_objectSpread({}, state), newState));\n  } // this function updates each values \n  // in the array of input values\n\n\n  function setvalues(val, i, input) {\n    let values = state.inputValue;\n    values[i] = val;\n    setInputState({\n      inputValue: values,\n      activeInput: input\n    });\n  } // handle the submit event by validating if every\n  // values in the input are valid. if not we will return \n  // a object that we be updated on the state. \n\n\n  async function submitHandler() {\n    let values = state.inputValue;\n    let name = checkValue('name', values[0]);\n    let email = checkValue('email', values[1]);\n    let message = checkValue('message', values[3]);\n\n    if (name === 'nameIsEmpty') {\n      setInputState(stateUpdateValue(name));\n    } else if (name === 'hasNumber') {\n      setInputState(stateUpdateValue(name));\n      return;\n    } else if (email === 'emailIsEmpty') {\n      setInputState(stateUpdateValue(email));\n    } else if (email === 'emailIsInvalid') {\n      setInputState(stateUpdateValue(email));\n    } else if (message === 'messageIsEmpty') {\n      setInputState(stateUpdateValue(message));\n    } else {\n      setInputState(stateUpdateValue('process'));\n      let result = await saveMessageToFirebase(values);\n\n      if (result) {\n        setTimeout(() => {\n          setInputState(stateUpdateValue('success'));\n          setInputState({\n            inputValue: ['', '', '', '']\n          });\n        }, 2500);\n      } else {\n        setTimeout(() => {\n          setInputState(stateUpdateValue('failed'));\n        }, 2500);\n      }\n    }\n  }\n\n  return __jsx(InputData.Provider, {\n    value: {\n      alert: state.alert,\n      inputValue: state.inputValue,\n      activeInput: state.activeInput,\n      setValues: setvalues,\n      submitHandler: submitHandler\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/context/inputContext.js"],"names":["React","useState","createContext","checkValue","stateUpdateValue","saveMessageToFirebase","InputData","InputDataContext","props","state","setState","inputValue","alert","message","color","activeInput","setInputState","newState","setvalues","val","i","input","values","submitHandler","name","email","result","setTimeout","setValues","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from 'react'\r\nimport {checkValue, stateUpdateValue} from '../common/inputValidation'\r\nimport {saveMessageToFirebase} from '../sessiondata/saveMessage'\r\n\r\n// export InputContext \r\nexport const InputData = createContext()\r\n\r\n// the props is received and has a value that references\r\n// the input data sets and returns data for the message form\r\nexport function InputDataContext (props) {\r\n\r\n  const [state, setState] = useState({\r\n    inputValue: ['', '', '', ''],\r\n    alert: {\r\n      message: '* required',\r\n      color: 'go'\r\n    },\r\n    activeInput: null\r\n  })\r\n\r\n  // this function updates the state\r\n  function setInputState (newState) {\r\n    setState({\r\n      ...state,\r\n      ...newState\r\n    })\r\n  }\r\n  \r\n  // this function updates each values \r\n  // in the array of input values\r\n  function setvalues(val, i, input){\r\n    let values = state.inputValue\r\n    values[i] = val\r\n    setInputState({ \r\n      inputValue: values,\r\n      activeInput: input\r\n    })\r\n  }\r\n\r\n  // handle the submit event by validating if every\r\n  // values in the input are valid. if not we will return \r\n  // a object that we be updated on the state. \r\n  async function submitHandler () {\r\n    let values = state.inputValue\r\n    let name = checkValue('name', values[0])\r\n    let email = checkValue('email', values[1])\r\n    let message = checkValue('message', values[3])\r\n\r\n    if(name === 'nameIsEmpty'){\r\n      setInputState(stateUpdateValue(name))\r\n    } else if(name === 'hasNumber'){\r\n      setInputState(stateUpdateValue(name))\r\n      return \r\n    } else if (email === 'emailIsEmpty') {\r\n      setInputState(stateUpdateValue(email))\r\n    } else if (email === 'emailIsInvalid') {\r\n      setInputState(stateUpdateValue(email))\r\n    } else if (message === 'messageIsEmpty') {\r\n      setInputState(stateUpdateValue(message))\r\n    } else {\r\n      setInputState(stateUpdateValue('process'))\r\n      let result = await saveMessageToFirebase(values)\r\n      if(result) {\r\n        setTimeout(()=> {\r\n          setInputState(stateUpdateValue('success'))\r\n          setInputState({inputValue: ['','','','']})\r\n        }, 2500)\r\n      } else {\r\n        setTimeout(() => {\r\n          setInputState(stateUpdateValue('failed'))\r\n        }, 2500)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <InputData.Provider value={{\r\n        alert: state.alert, \r\n        inputValue: state.inputValue,\r\n        activeInput: state.activeInput,\r\n        setValues: setvalues,\r\n        submitHandler: submitHandler}}>\r\n      {props.children}\r\n    </InputData.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}