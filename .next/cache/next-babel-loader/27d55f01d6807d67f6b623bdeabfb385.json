{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\components\\\\Navbar\\\\NavbarMenu\\\\NavbarMenu.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Close from '../../Svgs/Close/Close';\nimport { mouseEnter, mouseOut } from '../../../utils/pageanimations/navbarmenu/menuHoverEvents';\nimport { openMenu, closeMenu } from '../../../utils/pageanimations/navbarmenu/menuClickEvents';\nimport { fadeNavbar } from '../../../utils/pageanimations/navbarmenu/navbartransition';\nimport { PageData } from '../../../utils/context/pageContext';\nimport { StateContext } from '../../../utils/context/stateContext';\nimport { motion } from 'framer-motion';\n\nfunction NavbarMenu() {\n  _s();\n\n  var _useContext = useContext(PageData),\n      headers = _useContext.headers;\n\n  var _useContext2 = useContext(StateContext),\n      state = _useContext2.state,\n      setState = _useContext2.setState; // hover in functions and to set specific assigned colors\n\n\n  var hoverIn = function hoverIn() {\n    state.menuIsOpen ? mouseEnter(headers.colormodes.open, 'open') : mouseEnter(headers.colormodes.close, 'close');\n  }; // hover out functions and to set specific assigned colors\n\n\n  var hoverOut = function hoverOut() {\n    state.menuIsOpen ? mouseOut(headers.colormodes.open, 'open') : mouseOut(headers.colormodes.close, 'close');\n  }; // click events\n\n\n  var click = function click() {\n    // fade the navbar\n    fadeNavbar(); //check if menu is not animating. if false then\n    // execute the animation\n\n    if (!state.menuIsAnimating) {\n      // change the global state after 200ms fade transition\n      // from the navbar\n      setTimeout(function () {\n        setState({\n          menuIsOpen: !state.menuIsOpen,\n          menuIsAnimating: true\n        });\n      }, 200); // then call the animation whether the close or open the menu\n\n      state.menuIsOpen ? closeMenu(true) : openMenu(); // the set timeout will make a set the menuIsAnimating\n      // state back to false after 1700ms.\n\n      setTimeout(function () {\n        setState({\n          menuIsAnimating: false\n        });\n      }, 1700);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"navbar-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"front content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(motion.span, {\n    className: \"content-center front-text\",\n    style: {\n      color: headers.colormodes.close.foreground\n    },\n    variants: buttonAnims,\n    whileHover: \"hover\",\n    initial: \"initial\" // onMouseOver={hoverIn}\n    // onMouseLeave={hoverOut}\n    // onClick={click}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, state.menuIsOpen ? __jsx(Close, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 33\n    }\n  }) : 'Menu')), __jsx(\"div\", {\n    className: \"middle content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: \"middle-span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"back content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, __jsx(\"span\", {\n    className: \"back-span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(NavbarMenu, \"Mytm9RHdO9mg9ALCdFam/kmljx4=\");\n\n_c = NavbarMenu;\nexport default NavbarMenu;\nvar buttonAnims = {\n  initial: {\n    background: 'none'\n  },\n  hover: {\n    background: 'rgb(150,90,60)'\n  }\n}; // function NavbarMenu () {\n//   const {headers} = useContext(PageData)\n//   const {state, setState} = useContext(StateContext)\n//   // hover in functions and to set specific assigned colors\n//   const hoverIn = () => {\n//     state.menuIsOpen ? mouseEnter(headers.colormodes.open, 'open') :\n//      mouseEnter(headers.colormodes.close, 'close')\n//   }\n//   // hover out functions and to set specific assigned colors\n//   const hoverOut = () => {\n//     state.menuIsOpen ? mouseOut(headers.colormodes.open, 'open') :\n//       mouseOut(headers.colormodes.close, 'close')\n//   }\n//   // click events\n//   const click = () => {\n//     // fade the navbar\n//     fadeNavbar()\n//     //check if menu is not animating. if false then\n//     // execute the animation\n//     if(!state.menuIsAnimating){\n//       // change the global state after 200ms fade transition\n//       // from the navbar\n//       setTimeout(()=>{\n//         setState({\n//           menuIsOpen: !state.menuIsOpen,\n//           menuIsAnimating: true\n//         })\n//       }, 200)\n//       // then call the animation whether the close or open the menu\n//       state.menuIsOpen ? closeMenu(true) : openMenu()\n//       // the set timeout will make a set the menuIsAnimating\n//       // state back to false after 1700ms.\n//       setTimeout(()=>{\n//         setState({ menuIsAnimating: false })\n//       }, 1700)\n//     }\n//   }\n//   return (\n//     <div className=\"navbar-menu\">\n//       <div className=\"front content-center\">\n//         <span className=\"content-center front-text\"\n//           style={{'color': headers.colormodes.close.foreground}}\n//           onMouseOver={hoverIn}\n//           onMouseLeave={hoverOut}\n//           onClick={click}>\n//             {state.menuIsOpen ? <Close /> : 'Menu'}</span>  \n//       </div>\n//       <div className=\"middle content-center\">\n//         <span className=\"middle-span\"></span>\n//       </div>\n//       <div className=\"back content-center\">\n//         <span className=\"back-span\"></span>\n//       </div>\n//     </div>\n//   )\n// }\n// export default NavbarMenu\n\nvar _c;\n\n$RefreshReg$(_c, \"NavbarMenu\");","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/components/Navbar/NavbarMenu/NavbarMenu.js"],"names":["React","useContext","Close","mouseEnter","mouseOut","openMenu","closeMenu","fadeNavbar","PageData","StateContext","motion","NavbarMenu","headers","state","setState","hoverIn","menuIsOpen","colormodes","open","close","hoverOut","click","menuIsAnimating","setTimeout","color","foreground","buttonAnims","initial","background","hover"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAAQC,UAAR,EAAoBC,QAApB,QAAmC,0DAAnC;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,0DAAlC;AACA,SAAQC,UAAR,QAAyB,2DAAzB;AACA,SAAQC,QAAR,QAAuB,oCAAvB;AACA,SAAQC,YAAR,QAA2B,qCAA3B;AACA,SAAQC,MAAR,QAAqB,eAArB;;AAEA,SAASC,UAAT,GAAuB;AAAA;;AAAA,oBACHV,UAAU,CAACO,QAAD,CADP;AAAA,MACdI,OADc,eACdA,OADc;;AAAA,qBAEKX,UAAU,CAACQ,YAAD,CAFf;AAAA,MAEdI,KAFc,gBAEdA,KAFc;AAAA,MAEPC,QAFO,gBAEPA,QAFO,EAIrB;;;AACA,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBF,IAAAA,KAAK,CAACG,UAAN,GAAmBb,UAAU,CAACS,OAAO,CAACK,UAAR,CAAmBC,IAApB,EAA0B,MAA1B,CAA7B,GACCf,UAAU,CAACS,OAAO,CAACK,UAAR,CAAmBE,KAApB,EAA2B,OAA3B,CADX;AAED,GAHD,CALqB,CAUrB;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBP,IAAAA,KAAK,CAACG,UAAN,GAAmBZ,QAAQ,CAACQ,OAAO,CAACK,UAAR,CAAmBC,IAApB,EAA0B,MAA1B,CAA3B,GACEd,QAAQ,CAACQ,OAAO,CAACK,UAAR,CAAmBE,KAApB,EAA2B,OAA3B,CADV;AAED,GAHD,CAXqB,CAgBrB;;;AACA,MAAME,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB;AACAd,IAAAA,UAAU,GAFQ,CAGlB;AACA;;AACA,QAAG,CAACM,KAAK,CAACS,eAAV,EAA0B;AACxB;AACA;AACAC,MAAAA,UAAU,CAAC,YAAI;AACbT,QAAAA,QAAQ,CAAC;AACPE,UAAAA,UAAU,EAAE,CAACH,KAAK,CAACG,UADZ;AAEPM,UAAAA,eAAe,EAAE;AAFV,SAAD,CAAR;AAID,OALS,EAKP,GALO,CAAV,CAHwB,CASxB;;AACAT,MAAAA,KAAK,CAACG,UAAN,GAAmBV,SAAS,CAAC,IAAD,CAA5B,GAAqCD,QAAQ,EAA7C,CAVwB,CAWxB;AACA;;AACAkB,MAAAA,UAAU,CAAC,YAAI;AACbT,QAAAA,QAAQ,CAAC;AAAEQ,UAAAA,eAAe,EAAE;AAAnB,SAAD,CAAR;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;AACF,GAtBD;;AAwBA,SACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD,CAAQ,IAAR;AAAa,IAAA,SAAS,EAAC,2BAAvB;AACE,IAAA,KAAK,EAAE;AAACE,MAAAA,KAAK,EAAEZ,OAAO,CAACK,UAAR,CAAmBE,KAAnB,CAAyBM;AAAjC,KADT;AAEE,IAAA,QAAQ,EAAEC,WAFZ;AAGE,IAAA,UAAU,EAAC,OAHb;AAIE,IAAA,OAAO,EAAC,SAJV,CAKE;AACA;AACA;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASKb,KAAK,CAACG,UAAN,GAAmB,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnB,GAA+B,MATpC,CADF,CADF,EAaE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAbF,EAgBE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhBF,CADF;AAsBD;;GA/DQL,U;;KAAAA,U;AAiET,eAAeA,UAAf;AAGA,IAAMe,WAAW,GAAG;AAClBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE;AADL,GADS;AAIlBC,EAAAA,KAAK,EAAE;AACLD,IAAAA,UAAU,EAAE;AADP;AAJW,CAApB,C,CAmCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, {useContext} from 'react'\r\nimport Close from '../../Svgs/Close/Close'\r\nimport {mouseEnter, mouseOut} from '../../../utils/pageanimations/navbarmenu/menuHoverEvents'\r\nimport {openMenu, closeMenu} from '../../../utils/pageanimations/navbarmenu/menuClickEvents'\r\nimport {fadeNavbar} from '../../../utils/pageanimations/navbarmenu/navbartransition'\r\nimport {PageData} from '../../../utils/context/pageContext'\r\nimport {StateContext} from '../../../utils/context/stateContext'\r\nimport {motion} from 'framer-motion'\r\n\r\nfunction NavbarMenu () {\r\n  const {headers} = useContext(PageData)\r\n  const {state, setState} = useContext(StateContext)\r\n\r\n  // hover in functions and to set specific assigned colors\r\n  const hoverIn = () => {\r\n    state.menuIsOpen ? mouseEnter(headers.colormodes.open, 'open') :\r\n     mouseEnter(headers.colormodes.close, 'close')\r\n  }\r\n\r\n  // hover out functions and to set specific assigned colors\r\n  const hoverOut = () => {\r\n    state.menuIsOpen ? mouseOut(headers.colormodes.open, 'open') :\r\n      mouseOut(headers.colormodes.close, 'close')\r\n  }\r\n\r\n  // click events\r\n  const click = () => {\r\n    // fade the navbar\r\n    fadeNavbar()\r\n    //check if menu is not animating. if false then\r\n    // execute the animation\r\n    if(!state.menuIsAnimating){\r\n      // change the global state after 200ms fade transition\r\n      // from the navbar\r\n      setTimeout(()=>{\r\n        setState({\r\n          menuIsOpen: !state.menuIsOpen,\r\n          menuIsAnimating: true\r\n        })\r\n      }, 200)\r\n      // then call the animation whether the close or open the menu\r\n      state.menuIsOpen ? closeMenu(true) : openMenu()\r\n      // the set timeout will make a set the menuIsAnimating\r\n      // state back to false after 1700ms.\r\n      setTimeout(()=>{\r\n        setState({ menuIsAnimating: false })\r\n      }, 1700)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"navbar-menu\">\r\n      <div className=\"front content-center\">\r\n        <motion.span className=\"content-center front-text\"\r\n          style={{color: headers.colormodes.close.foreground}}\r\n          variants={buttonAnims}\r\n          whileHover='hover'\r\n          initial='initial'\r\n          // onMouseOver={hoverIn}\r\n          // onMouseLeave={hoverOut}\r\n          // onClick={click}\r\n          >\r\n            {state.menuIsOpen ? <Close /> : 'Menu'}</motion.span>  \r\n      </div>\r\n      <div className=\"middle content-center\">\r\n        <span className=\"middle-span\"></span>\r\n      </div>\r\n      <div className=\"back content-center\">\r\n        <span className=\"back-span\"></span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavbarMenu\r\n\r\n\r\nconst buttonAnims = {\r\n  initial: {\r\n    background: 'none'\r\n  },\r\n  hover: {\r\n    background: 'rgb(150,90,60)'\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function NavbarMenu () {\r\n//   const {headers} = useContext(PageData)\r\n//   const {state, setState} = useContext(StateContext)\r\n\r\n//   // hover in functions and to set specific assigned colors\r\n//   const hoverIn = () => {\r\n//     state.menuIsOpen ? mouseEnter(headers.colormodes.open, 'open') :\r\n//      mouseEnter(headers.colormodes.close, 'close')\r\n//   }\r\n\r\n//   // hover out functions and to set specific assigned colors\r\n//   const hoverOut = () => {\r\n//     state.menuIsOpen ? mouseOut(headers.colormodes.open, 'open') :\r\n//       mouseOut(headers.colormodes.close, 'close')\r\n//   }\r\n\r\n//   // click events\r\n//   const click = () => {\r\n//     // fade the navbar\r\n//     fadeNavbar()\r\n//     //check if menu is not animating. if false then\r\n//     // execute the animation\r\n//     if(!state.menuIsAnimating){\r\n//       // change the global state after 200ms fade transition\r\n//       // from the navbar\r\n//       setTimeout(()=>{\r\n//         setState({\r\n//           menuIsOpen: !state.menuIsOpen,\r\n//           menuIsAnimating: true\r\n//         })\r\n//       }, 200)\r\n//       // then call the animation whether the close or open the menu\r\n//       state.menuIsOpen ? closeMenu(true) : openMenu()\r\n//       // the set timeout will make a set the menuIsAnimating\r\n//       // state back to false after 1700ms.\r\n//       setTimeout(()=>{\r\n//         setState({ menuIsAnimating: false })\r\n//       }, 1700)\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"navbar-menu\">\r\n//       <div className=\"front content-center\">\r\n//         <span className=\"content-center front-text\"\r\n//           style={{'color': headers.colormodes.close.foreground}}\r\n//           onMouseOver={hoverIn}\r\n//           onMouseLeave={hoverOut}\r\n//           onClick={click}>\r\n//             {state.menuIsOpen ? <Close /> : 'Menu'}</span>  \r\n//       </div>\r\n//       <div className=\"middle content-center\">\r\n//         <span className=\"middle-span\"></span>\r\n//       </div>\r\n//       <div className=\"back content-center\">\r\n//         <span className=\"back-span\"></span>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default NavbarMenu"]},"metadata":{},"sourceType":"module"}