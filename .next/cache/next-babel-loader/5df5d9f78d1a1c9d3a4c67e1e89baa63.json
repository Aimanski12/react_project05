{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\utils\\\\context\\\\inputContext.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext } from 'react'; // export InputContext \n\nexport const InputData = createContext(); // the props is received and has a value that references\n// the input data sets and returns data for the message form\n\nexport class InputDataContext extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      inputValue: ['', '', '', ''],\n      alert: {\n        message: '* required',\n        color: 'go'\n      }\n    });\n\n    _defineProperty(this, \"setApplicationState\", newState => {\n      this.setState(_objectSpread(_objectSpread({}, this.state), newState));\n    });\n  }\n\n  setValues(val, i) {\n    let inputs = this.state.inputValue;\n    inputs[i] = val;\n    this.setApplicationState({\n      inputValue: inputs\n    });\n  } // function that will set update the state\n\n\n  render() {\n    return __jsx(InputData.Provider, {\n      value: {\n        alert: this.state.alert,\n        inputValue: this.state.inputValue,\n        setValues: this.setValues\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/context/inputContext.js"],"names":["React","Component","createContext","InputData","InputDataContext","inputValue","alert","message","color","newState","setState","state","setValues","val","i","inputs","setApplicationState","render","props","children"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAGD,aAAa,EAA/B,C,CAEP;AACA;;AACA,OAAO,MAAME,gBAAN,SAA+BH,SAA/B,CAAyC;AAAA;AAAA;;AAAA,mCAEtC;AACNI,MAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CADN;AAENC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,YADJ;AAELC,QAAAA,KAAK,EAAE;AAFF;AAFD,KAFsC;;AAAA,iDAmBvBC,QAAD,IAAc;AAClC,WAAKC,QAAL,iCACK,KAAKC,KADV,GAEKF,QAFL;AAID,KAxB6C;AAAA;;AAU9CG,EAAAA,SAAS,CAAEC,GAAF,EAAOC,CAAP,EAAU;AACjB,QAAIC,MAAM,GAAG,KAAKJ,KAAL,CAAWN,UAAxB;AACAU,IAAAA,MAAM,CAACD,CAAD,CAAN,GAAYD,GAAZ;AACA,SAAKG,mBAAL,CAAyB;AACvBX,MAAAA,UAAU,EAAEU;AADW,KAAzB;AAGD,GAhB6C,CAkB9C;;;AASAE,EAAAA,MAAM,GAAE;AAKN,WACE,MAAC,SAAD,CAAW,QAAX;AAAoB,MAAA,KAAK,EAAE;AACvBX,QAAAA,KAAK,EAAE,KAAKK,KAAL,CAAWL,KADK;AAEvBD,QAAAA,UAAU,EAAE,KAAKM,KAAL,CAAWN,UAFA;AAGvBO,QAAAA,SAAS,EAAE,KAAKA;AAHO,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG,KAAKM,KAAL,CAAWC,QALd,CADF;AASD;;AAzC6C","sourcesContent":["import React, { Component, createContext } from 'react'\r\n\r\n// export InputContext \r\nexport const InputData = createContext()\r\n\r\n// the props is received and has a value that references\r\n// the input data sets and returns data for the message form\r\nexport class InputDataContext extends Component {\r\n\r\n  state = {\r\n    inputValue: ['', '', '', ''],\r\n    alert: {\r\n      message: '* required',\r\n      color: 'go'\r\n    }\r\n  }\r\n\r\n  setValues (val, i) {\r\n    let inputs = this.state.inputValue\r\n    inputs[i] = val\r\n    this.setApplicationState({\r\n      inputValue: inputs\r\n    })\r\n  }\r\n\r\n  // function that will set update the state\r\n  setApplicationState = (newState) => {\r\n    this.setState({\r\n      ...this.state,\r\n      ...newState\r\n    })\r\n  }\r\n\r\n\r\n  render(){\r\n\r\n\r\n  \r\n\r\n    return (\r\n      <InputData.Provider value={{\r\n          alert: this.state.alert, \r\n          inputValue: this.state.inputValue,\r\n          setValues: this.setValues\r\n          }}>\r\n        {this.props.children}\r\n      </InputData.Provider>\r\n    )\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}