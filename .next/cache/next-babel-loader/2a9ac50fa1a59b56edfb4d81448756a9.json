{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\utils\\\\context\\\\inputContext.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, createContext } from 'react';\nimport { checkValue, stateUpdateValue } from '../common/inputValidation';\nimport { saveMessageToFirebase } from '../sessiondata/saveMessage'; // export InputContext \n\nexport var InputData = createContext(); // the props is received and has a value that references\n// the input data sets and returns data for the message form\n\nexport function InputDataContext(_x) {\n  return _InputDataContext.apply(this, arguments);\n}\n_c2 = InputDataContext;\n\nfunction _InputDataContext() {\n  var _s = $RefreshSig$();\n\n  _InputDataContext = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(props) {\n    var _useState, state, setState, setInputState, setvalues, submitHandler;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            submitHandler = function _submitHandler() {\n              var values = state.inputValue;\n              var name = checkValue('name', values[0]);\n              var email = checkValue('email', values[1]);\n              var message = checkValue('message', values[3]);\n\n              if (name === 'nameIsEmpty') {\n                setInputState(stateUpdateValue(name));\n              } else if (name === 'hasNumber') {\n                setInputState(stateUpdateValue(name));\n                return;\n              } else if (email === 'emailIsEmpty') {\n                setInputState(stateUpdateValue(email));\n              } else if (email === 'emailIsInvalid') {\n                setInputState(stateUpdateValue(email));\n              } else if (message === 'messageIsEmpty') {\n                setInputState(stateUpdateValue(message));\n              } else {\n                setInputState(stateUpdateValue('process'));\n                var result = saveMessageToFirebase(values);\n                console.log(result);\n              }\n            };\n\n            setvalues = function _setvalues(val, i, input) {\n              var values = state.inputValue;\n              values[i] = val;\n              setInputState({\n                inputValue: values,\n                activeInput: input\n              });\n            };\n\n            setInputState = function _setInputState(newState) {\n              setState(_objectSpread(_objectSpread({}, state), newState));\n            };\n\n            _s();\n\n            _useState = useState({\n              inputValue: ['', '', '', ''],\n              alert: {\n                message: '* required',\n                color: 'go'\n              },\n              activeInput: null\n            }), state = _useState[0], setState = _useState[1]; // this function updates the state\n\n            return _context.abrupt(\"return\", __jsx(InputData.Provider, {\n              value: {\n                alert: state.alert,\n                inputValue: state.inputValue,\n                activeInput: state.activeInput,\n                setValues: setvalues,\n                submitHandler: submitHandler\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 5\n              }\n            }, props.children));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }), \"a0PWcCKHXEJeoIVU+hKCfbYAKb4=\"));\n  return _InputDataContext.apply(this, arguments);\n}\n\n_c = InputDataContext;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InputDataContext\");\n$RefreshReg$(_c2, \"InputDataContext\");","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/context/inputContext.js"],"names":["React","useState","createContext","checkValue","stateUpdateValue","saveMessageToFirebase","InputData","InputDataContext","props","setInputState","setvalues","submitHandler","values","state","inputValue","name","email","message","result","console","log","val","i","input","activeInput","newState","setState","alert","color","setValues","children"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from 'react'\r\nimport {checkValue, stateUpdateValue} from '../common/inputValidation'\r\nimport {saveMessageToFirebase} from '../sessiondata/saveMessage'\r\n\r\n// export InputContext \r\nexport const InputData = createContext()\r\n\r\n// the props is received and has a value that references\r\n// the input data sets and returns data for the message form\r\nexport async function InputDataContext (props) {\r\n\r\n  const [state, setState] = useState({\r\n    inputValue: ['', '', '', ''],\r\n    alert: {\r\n      message: '* required',\r\n      color: 'go'\r\n    },\r\n    activeInput: null\r\n  })\r\n\r\n  // this function updates the state\r\n  function setInputState (newState) {\r\n    setState({\r\n      ...state,\r\n      ...newState\r\n    })\r\n  }\r\n  \r\n  // this function updates each values \r\n  // in the array of input values\r\n  function setvalues(val, i, input){\r\n    let values = state.inputValue\r\n    values[i] = val\r\n    setInputState({ \r\n      inputValue: values,\r\n      activeInput: input\r\n    })\r\n  }\r\n\r\n  // handle the submit event by validating if every\r\n  // values in the input are valid. if not we will return \r\n  // a object that we be updated on the state. \r\n  function submitHandler () {\r\n    let values = state.inputValue\r\n    let name = checkValue('name', values[0])\r\n    let email = checkValue('email', values[1])\r\n    let message = checkValue('message', values[3])\r\n\r\n    if(name === 'nameIsEmpty'){\r\n      setInputState(stateUpdateValue(name))\r\n    } else if(name === 'hasNumber'){\r\n      setInputState(stateUpdateValue(name))\r\n      return \r\n    } else if (email === 'emailIsEmpty') {\r\n      setInputState(stateUpdateValue(email))\r\n    } else if (email === 'emailIsInvalid') {\r\n      setInputState(stateUpdateValue(email))\r\n    } else if (message === 'messageIsEmpty') {\r\n      setInputState(stateUpdateValue(message))\r\n    } else {\r\n      setInputState(stateUpdateValue('process'))\r\n      let result = saveMessageToFirebase(values)\r\n      console.log(result)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <InputData.Provider value={{\r\n        alert: state.alert, \r\n        inputValue: state.inputValue,\r\n        activeInput: state.activeInput,\r\n        setValues: setvalues,\r\n        submitHandler: submitHandler}}>\r\n      {props.children}\r\n    </InputData.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}