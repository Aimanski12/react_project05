{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\Web Dev\\\\Main Files\\\\Official Website\\\\newdesign\\\\Main\\\\src\\\\utils\\\\context\\\\inputContext.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, createContext } from 'react'; // export InputContext \n\nexport var InputData = createContext(); // check if a string is empty\n\nvar ifEmptyString = /^\\s*\\S+.*/; // check if a string contains a number\n\nvar stringContainsNumber = /\\d/; // check if email is valid\n\nvar isEmailValid = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/; // the props is received and has a value that references\n// the input data sets and returns data for the message form\n\nexport function InputDataContext(props) {\n  _s();\n\n  var _useState = useState({\n    inputValue: ['', '', '', ''],\n    alert: {\n      message: '* required',\n      color: 'go'\n    },\n    activeInput: null\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // this function updates the state\n\n\n  function setInputState(newState) {\n    setState(_objectSpread(_objectSpread({}, state), newState));\n  } // this function updates each values \n  // in the array of input values\n\n\n  function setvalues(val, i) {\n    var values = state.inputValue;\n    values[i] = val;\n    setInputState({\n      inputValue: values\n    });\n  }\n\n  function submitHandler() {\n    var values = state.inputValue;\n    var name = checkName(values[0]);\n    var email = checkEmail(values[1]);\n\n    if (name === 'nameIsEmpty') {\n      setInputState(stateUpdateValue(name));\n      return;\n    } else if (name === 'hasNumber') {\n      setInputState(stateUpdateValue(name));\n      return;\n    } else if (email === 'emailIsEmpty') {\n      setInputState(stateUpdateValue(email));\n    } else if (email === 'emailIsInvalid') {\n      setInputState(stateUpdateValue(email));\n    }\n  }\n\n  return __jsx(InputData.Provider, {\n    value: {\n      alert: state.alert,\n      inputValue: state.inputValue,\n      activeInput: state.activeInput,\n      setValues: setvalues,\n      submitHandler: submitHandler\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, props.children);\n} // function to check if the name input is invalid\n\n_s(InputDataContext, \"a0PWcCKHXEJeoIVU+hKCfbYAKb4=\");\n\n_c = InputDataContext;\n\nfunction checkName(value) {\n  var nameIsNotEmpty = ifEmptyString.test(value);\n  var nameHasNumber = stringContainsNumber.test(value);\n  if (!nameIsNotEmpty) return 'nameIsEmpty';\n  if (nameHasNumber) return 'hasNumber';\n}\n\nfunction checkEmail(value) {\n  var emailIsNotEmpty = ifEmptyString.test(value);\n  var emailIsValid = isEmailValid.test(value);\n  if (!emailIsNotEmpty) return 'emailIsEmpty';\n  if (!emailIsValid) return 'emailIsInvalid';\n}\n\nfunction stateUpdateValue(val) {\n  if (val === 'nameIsEmpty') {\n    return state('Please enter your name.', 'name');\n  } else if (val === 'hasNumber') {\n    return state('Please enter a valid name', 'name');\n  } else if (val === 'emailIsEmpty') {\n    return state('Please enter your email.', 'email');\n  } else if (val === 'emailIsInvalid') {\n    return state('Please provide your email.', 'email');\n  }\n}\n\nfunction state(text, input) {\n  return {\n    alert: {\n      message: text,\n      color: 'alert'\n    },\n    activeInput: input\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"InputDataContext\");","map":{"version":3,"sources":["C:/Projects/Web Dev/Main Files/Official Website/newdesign/Main/src/utils/context/inputContext.js"],"names":["React","useState","createContext","InputData","ifEmptyString","stringContainsNumber","isEmailValid","InputDataContext","props","inputValue","alert","message","color","activeInput","state","setState","setInputState","newState","setvalues","val","i","values","submitHandler","name","checkName","email","checkEmail","stateUpdateValue","setValues","children","value","nameIsNotEmpty","test","nameHasNumber","emailIsNotEmpty","emailIsValid","text","input"],"mappings":"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","sourcesContent":["import React, { useState, createContext } from 'react'\r\n\r\n// export InputContext \r\nexport const InputData = createContext()\r\n\r\n// check if a string is empty\r\nconst ifEmptyString = /^\\s*\\S+.*/\r\n// check if a string contains a number\r\nconst stringContainsNumber = /\\d/\r\n// check if email is valid\r\nconst isEmailValid = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\r\n\r\n// the props is received and has a value that references\r\n// the input data sets and returns data for the message form\r\nexport function InputDataContext (props) {\r\n\r\n  const [state, setState] = useState({\r\n    inputValue: ['', '', '', ''],\r\n    alert: {\r\n      message: '* required',\r\n      color: 'go'\r\n    },\r\n    activeInput: null\r\n  })\r\n\r\n  // this function updates the state\r\n  function setInputState (newState) {\r\n    setState({\r\n      ...state,\r\n      ...newState\r\n    })\r\n  }\r\n  \r\n  // this function updates each values \r\n  // in the array of input values\r\n  function setvalues(val, i){\r\n    let values = state.inputValue\r\n    values[i] = val\r\n    setInputState({ inputValue: values })\r\n  }\r\n\r\n  function submitHandler () {\r\n    let values = state.inputValue\r\n    let name = checkName(values[0])\r\n    let email = checkEmail(values[1])\r\n\r\n    if(name === 'nameIsEmpty'){\r\n      setInputState(stateUpdateValue(name))\r\n      return \r\n    } else if(name === 'hasNumber'){\r\n      setInputState(stateUpdateValue(name))\r\n      return \r\n    } else if (email === 'emailIsEmpty') {\r\n      setInputState(stateUpdateValue(email))\r\n    } else if (email === 'emailIsInvalid') {\r\n      setInputState(stateUpdateValue(email))\r\n    }\r\n    \r\n  }\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <InputData.Provider value={{\r\n        alert: state.alert, \r\n        inputValue: state.inputValue,\r\n        activeInput: state.activeInput,\r\n        setValues: setvalues,\r\n        submitHandler: submitHandler}}>\r\n      {props.children}\r\n    </InputData.Provider>\r\n  )\r\n}\r\n\r\n// function to check if the name input is invalid\r\nfunction checkName (value){\r\n  let nameIsNotEmpty = ifEmptyString.test(value)\r\n  let nameHasNumber = stringContainsNumber.test(value)\r\n  if(!nameIsNotEmpty) return 'nameIsEmpty' \r\n  if(nameHasNumber) return 'hasNumber'\r\n}\r\n\r\nfunction checkEmail(value){\r\n  let emailIsNotEmpty = ifEmptyString.test(value)\r\n  let emailIsValid = isEmailValid.test(value)\r\n  if(!emailIsNotEmpty) return 'emailIsEmpty' \r\n  if(!emailIsValid) return 'emailIsInvalid'\r\n}\r\n\r\n\r\n\r\nfunction stateUpdateValue (val) {\r\n  if(val === 'nameIsEmpty') {\r\n    return state('Please enter your name.', 'name')\r\n  } else if(val === 'hasNumber') {\r\n    return state('Please enter a valid name', 'name')\r\n  } else if (val === 'emailIsEmpty'){\r\n    return state('Please enter your email.', 'email')\r\n  } else if (val === 'emailIsInvalid') {\r\n    return state('Please provide your email.', 'email')\r\n  }\r\n}\r\n\r\n\r\nfunction state(text, input){\r\n  return {\r\n    alert: {\r\n      message: text,\r\n      color: 'alert'\r\n    },\r\n    activeInput: input\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}